h1. Существование объектов

<p>Если вы просто хотите проверить существование объекта, есть метод, называемый <tt>exists?</tt>. Этот метод запрашивает базу данных, используя тот же запрос, что и <tt>find</tt>, но вместо возврата объекта или коллекции объектов, он возвращает или <tt>true</tt>, или <tt>false</tt>.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
Client.exists?(1)
</pre></div>
<p>Метод <tt>exists?</tt> также принимает несколько id, при этом возвращает true, если хотя бы хотя бы одна запись из них существует.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
Client.exists?(1,2,3)
# или
Client.exists?([1,2,3])
</pre></div>
<p>Более того, <tt>exists</tt> принимает опцию <tt>conditions</tt> подобно этому:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
Client.where(:first_name => 'Ryan').exists?
</pre></div>
<p>Даже возможно использовать <tt>exists?</tt> без аргументов:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
Client.exists?
</pre></div>
<p>Это возвратит <tt>false</tt>, если таблица <tt>clients</tt> пустая, и <tt>true</tt> в противном случае.</p>
<p>Для проверки на существование также можно использовать <tt>any?</tt> и <tt>many?</tt>на модели или relation.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# на модели
Post.any?
Post.many?

# на именнованном скоупе
Post.recent.any?
Post.recent.many?

# на relation
Post.where(:published => true).any?
Post.where(:published => true).many?

# на связи
Post.first.categories.any?
Post.first.categories.many?
</pre></div>
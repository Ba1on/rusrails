h1. Динамический поиск

<p>Для каждого поля (также называемого атрибутом), определенного в вашей таблице, Active Record предоставляет метод поиска. Например, если есть поле <tt>first_name</tt> в вашей модели <tt>Client</tt>, вы на халяву получаете <tt>find_by_first_name</tt> и <tt>find_all_by_first_name</tt> от Active Record. Если также есть поле <tt>locked</tt> в модели <tt>Client</tt>, вы также получаете <tt>find_by_locked</tt> и <tt>find_all_by_locked</tt>.</p>
<p>Вы можете также выполнять методы <tt>find_last_by_*</tt>, которые найдут последнюю запись, соответствующую аргументу.</p>
<p>Можете определить восклицательный знак (!) в конце динамического поиска, чтобы он вызвал ошибку <tt>ActiveRecord::RecordNotFound</tt>, если не возвратит ни одной записи, например так <tt>Client.find_by_name!("Ryan")</tt></p>
<p>Если хотите искать и по first_name, и по locked, можете сцепить эти поиски вместе, просто написав <tt>and</tt> между полями, например <tt>Client.find_by_first_name_and_locked("Ryan", true)</tt>.</p>
<div class='warning'><p>В Rails 3.1 и ниже, когда количество аргументов, переданных в метод динамического поиска, меньше количества полей, скажем <tt>Client.find_by_name_and_locked("Ryan")</tt>, как отсутствующий аргумент передавался <tt>nil</tt>. Такое поведение получилось непреднамеренно и будет изменено в Rails 3.2 на вызов <tt>ArgumentError</tt>.</p></div>
<p>Есть другой набор динамического поиска, который позволяет найти или создать/инициализировать объекты, если они не найдены. Они работают также, как другие поиски, и могут использованы как <tt>find_or_create_by_first_name(params[:first_name])</tt>. Его использование сначала выполнит поиск, а затем создание, если поиск вернет nil. <span class="caps">SQL</span> для <tt>Client.find_or_create_by_first_name("Ryan")</tt> выглядит так:</p>
<div class="code_container"><pre class="brush: sql; gutter: false; toolbar: false">
SELECT * FROM clients WHERE (clients.first_name = 'Ryan') LIMIT 1
BEGIN
INSERT INTO clients (first_name, updated_at, created_at, orders_count, locked)
  VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', 0, '0')
COMMIT
</pre></div>
<p>Родственник <tt>find_or_create</tt>, <tt>find_or_initialize</tt> ищет объект и, если он не существует, будет действовать аналогично вызову <tt>new</tt> с переданными аргументами. Например:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
client = Client.find_or_initialize_by_first_name('Ryan')
</pre></div>
<p>это или назначит объект существующего клиента с именем &#8220;Ryan&#8221; локальной переменной client, или инициализирует новый объект, подобно вызову <tt>Client.new(:first_name => 'Ryan')</tt>. Отсюда следует, что можно модифицировать другие поля в client посредством вызова установки атрибута для него: <tt>client.locked = true</tt>, а затем, если Вы хотите записать его в базу данных, просто вызовите <tt>save</tt> на нем.</p>
h1. Динамический поиск

Для каждого поля (также называемого атрибутом), определенного в вашей таблице, Active Record предоставляет метод поиска. Например, если есть поле +first_name+ в вашей модели +Client+, вы на халяву получаете +find_by_first_name+ и +find_all_by_first_name+ от Active Record. Если также есть поле +locked+ в модели +Client+, вы также получаете +find_by_locked+ и +find_all_by_locked+.

Вы можете также выполнять методы +find_last_by_*+, которые найдут последнюю запись, соответствующую аргументу.

Можете определить восклицательный знак (!) в конце динамического поиска, чтобы он вызвал ошибку +ActiveRecord::RecordNotFound+, если не возвратит ни одной записи, например так +Client.find_by_name!("Ryan")+

Если хотите искать и по first_name, и по locked, можете сцепить эти поиски вместе, просто написав +and+ между полями, например +Client.find_by_first_name_and_locked("Ryan", true)+.

WARNING: В Rails 3.1 и ниже, когда количество аргументов, переданных в метод динамического поиска, меньше количества полей, скажем +Client.find_by_name_and_locked("Ryan")+, как отсутствующий аргумент передавался +nil+. Такое поведение получилось непреднамеренно и будет изменено в Rails 3.2 на вызов +ArgumentError+.

Есть другой набор динамического поиска, который позволяет найти или создать/инициализировать объекты, если они не найдены. Они работают также, как другие поиски, и могут использованы как +find_or_create_by_first_name(params[:first_name])+. Его использование сначала выполнит поиск, а затем создание, если поиск вернет nil. SQL для +Client.find_or_create_by_first_name("Ryan")+ выглядит так:

<sql>
SELECT * FROM clients WHERE (clients.first_name = 'Ryan') LIMIT 1
BEGIN
INSERT INTO clients (first_name, updated_at, created_at, orders_count, locked)
  VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', 0, '0')
COMMIT
</sql>

Родственник +find_or_create+, +find_or_initialize+ ищет объект и, если он не существует, будет действовать аналогично вызову +new+ с переданными аргументами. Например:

<ruby>
client = Client.find_or_initialize_by_first_name('Ryan')
</ruby>

это или назначит объект существующего клиента с именем "Ryan" локальной переменной client, или инициализирует новый объект, подобно вызову +Client.new(:first_name => 'Ryan')+. Отсюда следует, что можно модифицировать другие поля в client посредством вызова установки атрибута для него: +client.locked = true+, а затем, если Вы хотите записать его в базу данных, просто вызовите +save+ на нем.

h1. Сессии

<p>Начнем обзор безопасности с сессий, которые могут быть уязвимыми к определенным атакам.</p>

<h4 id="what-are-sessions">1. Что такое сессии?</h4>
<p>&#8212; <em><span class="caps">HTTP</span> это протокол, независимый от предыдущих запросов. Сессии добавляют эту зависимость.</em></p>
<p>Большинству приложений необходимо следить за определенным состоянием конкретного пользователя. Это может быть содержимым корзины товаров или id залогиненного пользователя. Без идеи сессии пользователю нужно идентифицироваться, а возможно и аутентифицироваться, с каждым запросом. Rails создаст новую сессию автоматически, если новый пользователь получит доступ к приложению. Он загрузит существующую сессию, если пользователь уже пользовался приложением.</p>
<p>Сессия обычно состоит из хэша значений и id сессии, обычно 32-символьной строкой, идентифицирующего хэш. Каждый куки, посланный браузеру клиента, включает id сессии. И с другой стороны: пошлет его серверу с каждым запросом от клиента. В Rails можно сохранять и получать значения, используя метод session:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
session[:user_id] = @current_user.id
User.find(session[:user_id])
</pre></div>

<h4 id="session-id">2. Id сессии</h4>
<p>&#8212; <em>Id сессии это 32-байтное хэшированное значение MD5.</em></p>
<p>Id сессии состоит из хэшированного значения случайной строки. Случайная строка это текущее время, случайное число от 0 до 1, номер id процесса интерпретатора Ruby (также базирующегося на случайном числе) и строка-константа. В настоящее время не представляется возможным брутфорсить id сессии Rails. В настоящее время MD5 применяется бескомпромиссно, но он имеет коллизии, поэтому теоретически возможно создание разных строк результата с одинаковым хэшированным значением. Но это не влияет на безопасность на сегодняшний день.</p>

<h4 id="session-hijacking">3. Похищение сессии</h4>
<p>&#8212; <em>Воровство id пользовательской сессии позволяет злоумышленнику использовать веб приложение от лица жертвы.</em></p>
<p>Многие веб приложения имеют такую систему аутентификации: пользователь предоставляет имя пользователя и пароль, веб приложение проверяет их и хранит id соответствующего пользователя в хэше сессии. С этого момента сессия валидна. При каждом запросе приложение загрузит пользователя, определенного user id в сессии, без необходимости новой аутентификации. Session id в куки идентифицирует сессию.</p>
<p>Таким образом, куки служит как временная аутентификация для веб приложения. любой, кто воспользовался куки от кого-то другого, может пользоваться веб приложением, как этот пользователь – с возможными серьезными последствиями. Вот несколько способов похищения сессии и контрмеры этому:</p>
<ul>
	<li>Перехват куки в незащищенной сети. Беспроводная <span class="caps">LAN</span> может быть примером такой сети. В незашифрованной беспроводной <span class="caps">LAN</span> очень легко прослушивать трафик всех присоединенных клиентов. Это одна из причин не работать из кафе. Для создателя веб приложений это означает, что <em class="highlight">необходимо предоставить безопасное соединение через <span class="caps">SSL</span></em>. В Rails 3.1 и позже это может быть выполнено с помощью принуждения к соединению SSL в файле конфигурации приложения:</li>
</ul>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
config.force_ssl = true
</pre></div>
<ul>
	<li>Многие не очищают куки поле работы на публичном терминале. Поэтому, если предыдущий пользователь не вышел из веб приложения, вы сможете его использовать как этот пользователь. Обеспечьте пользователя <em class="highlight">кнопкой выхода</em> в веб приложении, и <em class="highlight">сделайте ее заметной</em>.</li>
</ul>
<ul>
	<li>Часто межсайтовый скриптинг (<span class="caps">XSS</span>) ставит целью получение куки пользователя. <a href="/ruby-on-rails-security-guide/injection#cross-site-scripting-xss">Подробнее о <span class="caps">XSS</span></a> вы прочитаете позже.</li>
</ul>
<ul>
	<li>Вместо похищения неизвестных злоумышленнику куки, он изменяет идентификатор сессии пользователя (в куки) на известный ему. Об этих так называемых фиксациях сессии вы прочитаете позже.</li>
</ul>
<p>Основная цель большинства злоумышлеников это сделать деньги. Подпольные цены за краденную банковскую учетную запись варьируются в пределах $10–$1000 (в зависимости от доступной суммы средств), $0.40–$20 за номер кредитной карточки, $1–$8 за аккаунт онлайн аукциона и $4–$30 за пароль от email, в соответствии с <a href="http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008.en-us.pdf">Symantec Global Internet Security Threat Report</a>.</p>

<h4 id="session-guidelines">4. Указания по сессии</h4>
<p>&#8212; <em>Вот несколько общих указаний по сессиям.</em></p>
<ul>
	<li><em class="highlight">Не храните большие объекты в сессии</em>. Вместо этого следует хранить их в базе данных и сохранять в сессии их id. Это позволит избежать головной боли при синхронизации и не будет забивать место хранения сессии (в зависимости от того, какое хранение сессии было выбрано, смотрите ниже). Также будет хорошо, если вы вдруг измените структуру объекта, а старые его версии все еще будут в куки некоторых клиентов. Конечно, при хранении сессий на сервере вы сможете просто очистить сессии, но при хранении на клиенте это сильно помогает.</li>
</ul>
<ul>
	<li><em class="highlight">Критические данные не следует хранить в сессии</em>. Если пользователь очищает куки или закрывает браузер, они потеряются. А в случае хранения сессии на клиенте, пользователь сможет прочесть данные.</li>
</ul>

<h4 id="session-storage">5. Хранение сессии</h4>
<p>&#8212; <em>Rails предоставляет несколько механизмов хранения для хэшев сессии. Наиболее важные это ActiveRecordStore и CookieStore.</em></p>
<p>Имеется несколько вариантов хранения сессии, т.е. где Rails сохраняет хэш сессии и id сессии. Большинство реальных приложений выбирают ActiveRecordStore (или одну из его производных) вместо хранения файлов по причине производительности и обслуживания. ActiveRecordStore хранит id и хэш сессии в таблице базы данных, и сохраняет и получает хэш при каждом запросе.</p>
<p>Rails 2 представил новый способ хранения сессии по умолчанию, CookieStore. CookieStore сохраняет хэш сессии прямо в куки на стороне клиента. Сервер получает хэш сессии из куки, и устраняется необходимость в id сессии. Это значительно увеличивает скорость приложения, но является спорным вариантом хранения, и вы должны подумать об условиях безопасности этого:</p>
<ul>
	<li>Куки предполагают ограничение размера в 4kB. Это нормально, так как не нужно хранить большие объемы данных в сессии, о чем писалось ранее. <em class="highlight">Хранение id пользователя в сессии это обычно нормально</em>.</li>
</ul>
<ul>
	<li>Клиент может увидеть все, что вы храните в сессии, поскольку они хранятся чистым текстом (фактически кодированы Base64, но не зашифрованы). Поэтому, разумеется, <em class="highlight">вы не захотите хранить тут секретные данные</em>. Для предотвращения фальсификации хэша сессии, из сессии рассчитывается дайджест с помощью серверного секретного ключа, и вставляется в конец куки.</li>
</ul>
<p>Это означает, что безопасность такого хранения основывается на этом секретном ключе (и на алгоритме хеширования, который по умолчанию SHA512, не являющийся пока скомпрометированным). Поэтому <em class="highlight">не используйте банальный секретный ключ, т.е. слово из словаря, или короче 30 символов</em>. Поместите секретный ключ в Ваш environment.rb:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
config.action_dispatch.session = {
  :key    =&gt; '_app_session',
  :secret =&gt; '0x0dkfj3927dkc7djdh36rkckdfzsg...'
}
</pre></div>
<p>Имеются, тем не менее, производные от CookieStore, которые шифруют хэш сессии так, что клиент не может видеть ее.</p>

<h4 id="replay-attacks-for-cookiestore-sessions">6. Атаки воспроизведения для сессий CookieStore</h4>
<p>&#8212; <em>Другой тип атак, которого следует опасаться при использовании CookieStore, это атака воспроизведения (replay attack).</em></p>
<p>Она работает подобным образом:</p>
<ul>
	<li>Пользователь получает кредит, сумма сохраняется в сессию (что является плохой идеей в любом случае, но мы воспользуемся этим для целей демонстрации).</li>
	<li>Пользователь покупает что-либо.</li>
	<li>Его новый, уменьшившийся кредит сохраняется в сессии.</li>
	<li>Темная сторона пользователя заставила его взять куки с первого шага (которые он предварительно скопировал) и заменить текущие куки в браузере.</li>
	<li>Пользователь получил свой кредит назад.</li>
</ul>
<p>Включение поля nonce (случайное значение) в сессию решает проблему атак воспроизведения. Поле nonce валидно только один раз, и сервер должен отслеживать все валидные nonce. Такое становится еще более сложным, если у вас несколько серверов приложений (mongrels). Хранение nonce в таблице базы данных аннулирует основную цель CookieStore (избежание доступа к базе данных).</p>
<p>Лучшее <em class="highlight">решение против атак это хранить данные такого рода не в сессии, а в базе данных</em>. В нашем случае храните величину кредита в базе данных, а logged_in_user_id в сессии.</p>

<h4 id="session-fixation">7. Фиксации сессии</h4>
<p>&#8212; <em>Кроме кражи id сессии пользователя, злоумышленник может исправить id сессии на известный ему. Это называется фиксацией сессии.</em></p>
<p><img src="/system/images/session_fixation.png" title="Фиксация сессии" alt="Фиксация сессии" /></p>
<p>Эта атака сосредоточена на id сессии пользователя, известному злоумышленнику, и принуждению браузера пользователя использовать этот id. После этого злоумышленнику не нужно воровать id сессии. Вот как эта атака работает:</p>
<ol>
	<li>Злоумышленник создает валидный id сессии: он загружает страницу авторизации веб приложения, где он хочет исправить сессию, и принимает id сессии в куки из отклика (смотрите номера 1 и 2 на изображении).</li>
	<li>Он по возможности поддерживает сессию. Сессии со сроком дейстивя, к примеру 20 минут, значительно сокращает временные рамки для атаки. Поэтому он обращается к веб приложению время от времени, чтобы сохранить сессию действующей.</li>
	<li>Теперь злоумышленник должен заставить браузер пользователя использовать этот id сессии (смотрите номер 3 на изображении). Поскольку нельзя изменить куки другого домена (из-за политики общего происхождения), злоумышленник должен запустить JavaScript из домена целевого веб приложения. Инъекция кода JavaScript в приложение с помощью <span class="caps">XSS</span> завершает эту атаку. Вот пример: <tt>&lt;script&gt;?document.cookie="_session_id=16d5b78abb28e3d6206b60f22a03c8d9";?&lt;/script&gt;</tt>. Про <span class="caps">XSS</span> и инъекции будет написано позже.</li>
	<li>Злоумышленник заманивает жертву на зараженную страницу с кодом JavaScript. Просмотрев эту страницу, браузер жертвы изменит id сессии на id сессии-ловушки.</li>
	<li>Так как новая сессия-ловушка не использовалась, веб приложение затребует аутентификации пользователя.</li>
	<li>С этого момента жертва и злоумышленник будут совместно использовать веб приложение с одинаковой сессией: сессия станет валидной и жертва не будет уведомлена об атаке.</li>
</ol>

<h4 id="session-fixation--countermeasures">8. Фиксации сессии - контрмеры</h4>
<p>&#8212; <em>Одна строка кода защитит Вас от фиксации сессии.</em></p>
<p>Наиболее эффективная контрмера это <em class="highlight">создавать новый идентификатор сессии</em> и объявлять старый невалидным после успешного входа. Тогда злоумышленник не сможет использовать подмененный идентификатор сессии. Это также хорошая контрмера против похищения сессии. Вот как создать новую сессию в Rails:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
reset_session
</pre></div>
<p>Если используете популярный плагин RestfulAuthentication для управления пользователями, добавьте reset_session в экшн SessionsController#create. Отметьте, что это удалит любые значения из сессии, <em class="highlight">поэтому необходимо передать их в новую сессию</em>.</p>
<p>Другой контрмерой является <em class="highlight">сохранение специфичных для пользователя свойств в сессии</em>, проверка их каждый раз с входящим запросом и запрет доступа, если информация не соответствует. Такими свойствами могут быть удаленный адрес IP или агент пользователя (имя веб браузера), хотя последний менее специфичен. При сохранении адреса IP вы должны понимать, что имеется большое количество интернет провайдеров или больших организаций, размещающих своих пользователей за прокси. <em class="highlight">Адрес может меняться в течении сессии</em>, поэтому такие пользователи не смогут использовать ваше приложение, либо только с ограничениями.</p>

<h4 id="session-expiry">9. Окончание сессии</h4>
<p>&#8212; <em>Сессии, которые не имеют время жизни, растягивают временной период для атак, таких как подделка межсайтовых запросов (<span class="caps">CSRF</span>), похищение сессии и фиксация сессии.</em></p>
<p>Один из способов это установить временную метку окончания куки с id сессии. Однако клиент может редактировать куки, хранящиеся в веб браузере, поэтому сессии со сроком действия безопаснее хранить на сервере. Вот пример как <em class="highlight">окончить сессии в таблице базы данных</em>. Вызовите <tt>Session.sweep("20m")</tt> чтобы окончить сессии, которые использовались более 20 минут назад.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class Session &lt; ActiveRecord::Base
  def self.sweep(time = 1.hour)
    time = time.split.inject { |count, unit|
      count.to_i.send(unit)
    } if time.is_a?(String)

    delete_all &quot;updated_at &lt; '#{time.ago.to_s(:db)}'&quot;
  end
end
</pre></div>
<p>Раздел о фиксации сессии представил проблему поддержки сессий. Злоумышленник, поддерживающий сессию каждые пять минут, будет поддерживать срок жизни сессии вечно, хотя у сессии и есть срок действия. Простым решением для этого может быть добавление столбца created_at в таблицу sessions. Теперь можете удалять сессии, которые были созданы очень давно. Используйте эту строку в вышеупомянутом методе sweep:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
delete_all &quot;updated_at &lt; '#{time.to_s(:db)}' OR
  created_at &lt; '#{2.days.ago.to_s(:db)}'&quot;
</pre></div>
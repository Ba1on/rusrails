h1. Общие опции валидаций

<p>Есть несколько общих опций валидаций:</p>

<h4 id="allow-nil">1. <tt>:allow_nil</tt></h4>
<p>Опция <tt>:allow_nil</tt> пропускает валидацию, когда проверяемое значение равно <tt>nil</tt>.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class Coffee &lt; ActiveRecord::Base
  validates :size, :inclusion => { :in => %w(small medium large),
    :message => "%{value} is not a valid size" }, :allow_nil => true
end
</pre></div>
<div class='note'><p><tt>:allow_nil</tt> игнорируется валидатором presence.</p></div>

<h4 id="allow-blank">2. <tt>:allow_blank</tt></h4>
<p>Опция <tt>:allow_blank</tt> подобна опции <tt>:allow_nil</tt>. Эта опция пропускает валидацию, если значение аттрибута <tt>blank?</tt>, например <tt>nil</tt> или пустая строка.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class Topic &lt; ActiveRecord::Base
  validates :title, :length => { :is => 5 }, :allow_blank => true
end

Topic.create(&quot;title&quot; =&gt; &quot;&quot;).valid? # =&gt; true
Topic.create(&quot;title&quot; =&gt; nil).valid? # =&gt; true
</pre></div>
<div class='note'><p><tt>:allow_blank</tt> игнорируется валидатором presence.</p></div>

<h4 id="message">3. <tt>:message</tt></h4>
<p>Как мы уже видели, опция <tt>:message</tt> позволяет определить сообщение, которое будет добавлено в коллекцию <tt>errors</tt>, когда валидация проваливается. Если эта опция не используется, Active Record будет использовать соответственные сообщение об ошибках по умолчанию для каждого валидационного хелпера.</p>

<h4 id="on">4. <tt>:on</tt></h4>
<p>Опция <tt>:on</tt> позволяет определить, когда должна произойти валидация. Стандартное поведение для всех встроенных валидационных хелперов это запускаться при сохранении (и когда создается новая запись, и когда она обновляется). Если хотите изменить это, используйте <tt>:on => :create</tt>, для запуска валидации только когда создается новая запись, или <tt>:on => :update</tt>, для запуска валидации когда запись обновляется.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class Person &lt; ActiveRecord::Base
  # будет возможно обновить email с дублирующим значением
  validates :email, :uniqueness => true, :on => :create

  # будет возможно создать запись с нечисловым возрастом
  validates :age, :numericality => true, :on => :update

  # по умолчанию (проверяет и при создании, и при обновлении)
  validates :name, :presence => true, :on => :save
end
</pre></div>
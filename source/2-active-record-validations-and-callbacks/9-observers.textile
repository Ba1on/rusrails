h1. Обсерверы

<p>Обсерверы похожи на колбэки, но с важными отличиями. В то время как колбэки внедряют в модель свой код, непосредственно не связанный с нею, обсерверы позволяют добавить ту же функциональность, но вне модели. Например, можно утверждать, что модель <tt>User</tt> не должна включать код для рассылки писем с подтверждением регистрации. Всякий раз, когда используются колбэки с кодом, прямо не связанным с моделью, возможно, Вам захочется вместо них создать обсервер.</p>

<h4 id="creating-observers">1. Создание обсерверов</h4>
<p>Например, рассмотрим модель <tt>User</tt>, в которой хотим отправлять электронное письмо всякий раз, когда создается новый пользователь. Так как рассылка писем непосредственно не связана с целями нашей модели, можно создать обсервер, содержащий эту функциональность.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
rails generate observer User
</pre></div>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class UserObserver &lt; ActiveRecord::Observer
  def after_create(model)
    # код для рассылки подтверждений email...
  end
end
</pre></div>
<p>Как в случае с классами колбэков, методы обсервера получают рассматриваемую модель как параметр.</p>

<h4 id="registering-observers">2. Регистрация обсерверов</h4>
<p>По соглашению, обсерверы располагаются внутри директории <tt>app/models</tt> и регистрируются в Вашем приложении в файле <tt>config/environment.rb</tt>. Например, <tt>UserObserver</tt> будет сохранен как <tt>app/models/user_observer.rb</tt> и зарегистрирован в <tt>config/environment.rb</tt> таким образом:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# Activate observers that should always be running
config.active_record.observers = :user_observer
</pre></div>
<p>Естественно, настройки в <tt>config/environments</tt> имеют преимущество перед <tt>config/environment.rb</tt>. Поэтому, если Вы предпочитаете не запускать обсервер для всех сред, можете его просто зарегистрировать для определенной среды.</p>

<h4 id="sharing-observers">3. Совместное использование обсерверов</h4>
<p>По умолчанию Rails просто убирает &#8220;Observer&#8221; из имени обсервера для поиска модели, которую он должен рассматривать. Однако, обсерверы также могут быть использованы для добавления обращения более чем к одной модели, это возможно, если вручную определить модели, который должен рассматривать обсервер.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class MailerObserver &lt; ActiveRecord::Observer
  observe :registration, :user
  
  def after_create(model)
    # код для рассылки подтверждений email...
  end
end
</pre></div>
<p>В этом примере метод <tt>after_create</tt> будет вызван всякий раз, когда будет создан <tt>Registration</tt> или <tt>User</tt>. Отметьте, что этот новый <tt>MailerObserver</tt> также должен быть зарегистрирован в <tt>config/environment.rb</tt>, чтобы вступил в силу.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# Activate observers that should always be running
config.active_record.observers = :mailer_observer
</pre></div>
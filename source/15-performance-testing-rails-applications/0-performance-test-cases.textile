h1. Варианты тестирования производительности

Тесты производительности Rails являются специальным типом интеграционных тестов, разработанным для бенчмаркинга и профилирования тестируемого кода. С тестами производительности можно определить, откуда идут проблемы вашего приложения с памятью или скоростью, и получить более глубокую картину об этих проблемах.

В только что созданном приложении на Rails, +test/performance/browsing_test.rb+ содержит пример теста производительности:

<ruby>
require 'test_helper'
require 'rails/performance_test_help'

# Profiling results for each test method are written to tmp/performance.
class BrowsingTest < ActionDispatch::PerformanceTest
  def test_homepage
    get '/'
  end
end
</ruby>

Этот пример является простым случаем теста производительности для профилирования запроса GET к домашней странице приложения.

h4. Создание тестов производительности

Rails предоставляет генератор, названный +performance_test+, для создания новых тестов производительности:

<shell>
$ rails generate performance_test homepage
</shell>

Это создаст +homepage_test.rb+ в директории +test/performance+:

<ruby>
require 'test_helper'
require 'rails/performance_test_help'

class HomepageTest < ActionDispatch::PerformanceTest
  # Replace this with your real tests.
  def test_homepage
    get '/'
  end
end
</ruby>

h4. Примеры

Давайте предположим, что ваше приложение имеет следующие контроллер и модель:

<ruby>
# routes.rb
root :to => 'home#index'
resources :posts

# home_controller.rb
class HomeController < ApplicationController
  def dashboard
    @users = User.last_ten.includes(:avatars)
    @posts = Post.all_today
  end
end

# posts_controller.rb
class PostsController < ApplicationController
  def create
    @post = Post.create(params[:post])
    redirect_to(@post)
  end
end

# post.rb
class Post < ActiveRecord::Base
  before_save :recalculate_costly_stats

  def slow_method
    # I fire gallzilion queries sleeping all around
  end

  private

  def recalculate_costly_stats
    # CPU heavy calculations
  end
end
</ruby>

h5. Пример с контроллером

Поскольку тесты производительности являются специальным видом интеграционного теста, можете использовать в них методы +get+ и +post+.

Вот тест производительности для +HomeController#dashboard+ и +PostsController#create+:

<ruby>
require 'test_helper'
require 'rails/performance_test_help'

class PostPerformanceTest < ActionDispatch::PerformanceTest
  def setup
    # Приложение требует залогиненого пользователя
    login_as(:lifo)
  end

  def test_homepage
    get '/dashboard'
  end

  def test_creating_new_post
    post '/posts', :post => { :body => 'lifo is fooling you' }
  end
end
</ruby>

Более детально о методах +get+ и +post+ написано в руководстве по "тестированию приложений на Rails":/a-guide-to-testing-rails-applications.

h5. Пример с моделью

Несмотря на то, что тесты производительности являются интеграционными тестами и поэтому ближе к циклу запрос/ответ по своей природе, вы также можете тестировать производительность кода модели:

<ruby>
require 'test_helper'
require 'rails/performance_test_help'

class PostModelTest < ActionDispatch::PerformanceTest
  def test_creation
    Post.create :body => 'still fooling you', :cost => '100'
  end

  def test_slow_method
    # Используем фикстуру posts(:awesome)
    posts(:awesome).slow_method
  end
end
</ruby>

h4. Режимы

Тесты производительности могут быть запущены в двух режимах: Бенчмаркинг и Профилирование.

h5. Бенчмаркинг

Бенчмаркинг помогает найти как быстро выполняется каждый тест производительности. В режиме бенчмаркинга каждый случай тестирования выполняется +4 раза+.

Чтобы запустить тесты производительности в режиме бенчмаркинга:

<shell>
$ rake test:benchmark
</shell>

h5. Профилирование

Профилирование помогает увидеть подробности теста производительности и предоставить углубленную картину медленных и памятепотребляемых частей. В режиме профилирования каждый случай тестирования запускается +1 раз+.

Чтобы запустить тесты производительности в режиме профилирования:

<shell>
$ rake test:profile
</shell>

h4. Метрики

Бенчмаркинг и профилирование запускают тесты производительности и выдают разные метрики. Доступность каждой метрики определена используемым интерпретатором - не все из них поддерживают все метрики - и используемым режимом. Краткое описание каждой метрики и их доступность для интерпретатора/режима описаны ниже.

h5. Время разделения (Wall Time)

Время разделения измеряет реальное время, прошедшее в течение запуска теста. Оно зависит от любых других процессов, параллельно работающих в системе.

h5. Время процесса (Process Time)

Время процесса измеряет время, затраченное процессом. Оно не зависит от любых других процессов, параллельно работающих в системе. Поэтому время процесса скорее всего будет постоянным для любого конкретного теста производительности, независимо от загрузки машины.

h5. Память (Memory)

Память измеряет количество памяти, использованной в случае теста производительности.

h5. Объекты (Objects)

Объекты измеряют число объектов, выделенных в случае теста производительности.

h5. Запуски GC (GC Runs)

Запуски GC измеряют, сколько раз GC был вызван в случае теста производительности.

h5. Время GC (GC Time)

Время GC измеряет количество времени, потраченного в GC для случая теста производительности.

h5. Доступность метрик

h6. Бенчмаркинг

|_.Интерпретатор|_.Wall Time|_.Process Time|_.CPU Time|_.User Time|_.Memory|_.Objects|_.GC Runs|_.GC Time|
|_.MRI          | да        | да           | да       | нет       | да     | да      | да      | да      |
|_.REE          | да        | да           | да       | нет       | да     | да      | да      | да      |
|_.Rubinius     | да        | нет          | нет      | нет       | да     | да      | да      | да      |
|_.JRuby        | да        | нет          | нет      | да        | да     | да      | да      | да      |

h6. Профилирование

|_.Интерпретатор|_.Wall Time|_.Process Time|_.CPU Time|_.User Time|_.Memory|_.Objects|_.GC Runs|_.GC Time|
|_.MRI          | да        | да           | нет      | нет       | да     | да      | да      | да      |
|_.REE          | да        | да           | нет      | нет       | да     | да      | да      | да      |
|_.Rubinius     | да        | нет          | нет      | нет       | нет    | нет     | нет     | нет     |
|_.JRuby        | да        | нет          | нет      | нет       | нет    | нет     | нет     | нет     |

NOTE: Для профилирования под JRuby следует запустить +export JRUBY_OPTS="-Xlaunch.inproc=false --profile.api"+ *перед* тестами производительности.

h4. Интерпретация результата

Тесты производительности выводят различные результаты в директорию +tmp/performance+, в зависимости от их режима и метрики.

h5. Бенчмаркинг

В режиме бенчмаркинга тесты производительности выводят два типа результата:

h6. Командная строка

Это основная форма результата в режиме бенчмаркинга. пример:

<shell>
BrowsingTest#test_homepage (31 ms warmup)
           wall_time: 6 ms
              memory: 437.27 KB
             objects: 5,514
             gc_runs: 0
             gc_time: 19 ms
</shell>

h6. Файлы CSV

Результаты теста производительности также добавляются к файлам +.csv+ в tmp/performance+. Напрмер, запуск дефолтного +BrowsingTest#test_homepage+ создаст следующие пять файлов:

* BrowsingTest#test_homepage_gc_runs.csv
* BrowsingTest#test_homepage_gc_time.csv
* BrowsingTest#test_homepage_memory.csv
* BrowsingTest#test_homepage_objects.csv
* BrowsingTest#test_homepage_wall_time.csv

Так как результаты добавляются к этим файлам каждый раз, как тесты производительности запускаются, вы можете собирать данные за период времени. Это может быть полезным при анализе эффекта от изменения кода.

Образец вывода в +BrowsingTest#test_homepage_wall_time.csv+:

<shell>
measurement,created_at,app,rails,ruby,platform
0.00738224999999992,2009-01-08T03:40:29Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00755874999999984,2009-01-08T03:46:18Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00762099999999993,2009-01-08T03:49:25Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00603075000000008,2009-01-08T04:03:29Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00619899999999995,2009-01-08T04:03:53Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00755449999999991,2009-01-08T04:04:55Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00595999999999997,2009-01-08T04:05:06Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00740450000000004,2009-01-09T03:54:47Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00603150000000008,2009-01-09T03:54:57Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
0.00771250000000012,2009-01-09T15:46:03Z,,3.0.0,ruby-1.8.7.249,x86_64-linux
</shell>

h5(#output-profiling). Профилирование

В режиме профилирования тесты производительности могут создавать разные типы результатов. Результат в командной строке всегда присутствует, но поддержка остальных зависит от используемого интерпретатора. Краткое описание каждого типа и их доступность для интерпретаторов представлены ниже.

h6. Командная строка

Это очень простая форма вывода результата в режиме профилирования:

<shell>
BrowsingTest#test_homepage (58 ms warmup)
        process_time: 63 ms
              memory: 832.13 KB
             objects: 7,882
</shell>

h6. Флэт (Flat)

Флэт показывает метрики - время. память и т.д. - потраченные на каждый метод. "Обратитесь к профессиональной документации по ruby для лучшего объяснения":http://ruby-prof.rubyforge.org/files/examples/flat_txt.html.

h6. Граф (Graph)

Граф показывает, как долго каждый метод запускался, какие методы его вызывали, и какие методы вызывал он. "Обратитесь к профессиональной документации по ruby для лучшего объяснения":http://ruby-prof.rubyforge.org/files/examples/graph_txt.html.

h6. Дерево (Tree)

Дерево это профилированная информация в формате calltree, используемом в "kcachegrind":http://kcachegrind.sourceforge.net/html/Home.html и подобных инструментах.

h6. Доступность вывода результатов

|_.         |_.Flat|_.Graph|_.Tree|
|_.MRI      | да   | да    | да   |
|_.REE      | да   | да    | да   |
|_.Rubinius | да   | да    | нет  |
|_.JRuby    | да   | да    | нет  |

h4. Настройка тестовых прогонов

Запуски тестов могут быть настроены с помощью установки переменной класса +profile_options+ в вашем классе теста.

<ruby>
require 'test_helper'
require 'rails/performance_test_help'

# Profiling results for each test method are written to tmp/performance.
class BrowsingTest < ActionDispatch::PerformanceTest
  self.profile_options = { :runs => 5,
                           :metrics => [:wall_time, :memory] }

  def test_homepage
    get '/'
  end
end
</ruby>

В этом примере тест будет запущен 5 раз и измерит время разделения и память. Есть несколько конфигурационных опций:

|_.Опция    |_.Описание                                       |_.По умолчанию                   |_.Режим|
|+:runs+    |Количество запусков.                             |Бенчмаркинг: 4, Профилирование: 1|Оба    |
|+:output+  |Директория, используемая для записи результатов. |+tmp/performance+                |Оба    |
|+:metrics+ |Используемые метрики.                            |Смотрите ниже.                   |Оба    |
|+:formats+ |Форматы вывода результатов.                      |Смотрите ниже.                   |Профилирование|

У метрик и форматов разные значения по умолчанию, зависящие от используемого интерпретатора.

|_.Интерпретатор|_.Режим        |_.Метрики по умолчанию                                 |_.Форматы по умолчанию|
|/2.MRI/REE     | Бенчмаркинг   |+[:wall_time, :memory, :objects, :gc_runs, :gc_time]+  |N/A|
|                 Профилирование|+[:process_time, :memory, :objects]+                   |+[:flat, :graph_html, :call_tree, :call_stack]+|
|/2.Rubinius    | Бенчмаркинг   |+[:wall_time, :memory, :objects, :gc_runs, :gc_time]+  |N/A|
|                 Профилирование|+[:wall_time]+                                         |+[:flat, :graph]+|
|/2.JRuby       | Бенчмаркинг   |+[:wall_time, :user_time, :memory, :gc_runs, :gc_time]+|N/A|
|                 Профилирование|+[:wall_time]+                                         |+[:flat, :graph]+|

Как вы уже, наверное, заметили, метрики и форматы определены с использованием массива символов, с "подчеркиванием":http://api.rubyonrails.org/classes/String.html#method-i-underscore в каждом имени.

h4. Среда тестов производительности

Тесты производительности запускаются в среде +development+. Но запускаемые тесты производительности могут настраиваться следующими конфигурационными параметрами:

<shell>
ActionController::Base.perform_caching = true
ActiveSupport::Dependencies.mechanism = :require
Rails.logger.level = ActiveSupport::BufferedLogger::INFO
</shell>

Когда +ActionController::Base.perform_caching+ устанавливается в +true+, тесты производительности будут вести себя так, как будто они в среде +production+.

h4. Установка Ruby, пропатченного GC

Чтобы взять лучшее от тестов производительности Rails под MRI, нужно создать специальный мощный двоичный файл Ruby.

Рекомендованные патчи для каждой версии MRI следующие:

|_.Версия     |_.Патч|
|1.8.6        |ruby186gc|
|1.8.7        |ruby187gc|
|1.9.2 и выше |gcdata|

Все они находятся в директории "_patches_ RVM":https://github.com/wayneeseguin/rvm/tree/master/patches/ruby для каждой определенной версии интерпретатора.

Что касается самой установки, можно либо сделать это просто, используя "RVM":http://rvm.beginrescueend.com, либо создать все из исходников, что несколько сложнее.

h5. Установка с использованием RVM

Процесс установки пропатченного интерпретатора Ruby очень прост, если позволить всю работу выполнить RVM. Все нижеследующие команды RVM предоставят пропатченный интерпретатор Ruby:

<shell>
$ rvm install 1.9.2-p180 --patch gcdata
$ rvm install 1.8.7 --patch ruby187gc
$ rvm install 1.9.2-p180 --patch ~/Downloads/downloaded_gcdata_patch.patch
</shell>

можно даже сохранить обычный интерпретатор, назначив имя пропатченному:

<shell>
$ rvm install 1.9.2-p180 --patch gcdata --name gcdata
$ rvm use 1.9.2-p180 # your regular ruby
$ rvm use 1.9.2-p180-gcdata # your patched ruby
</shell>

И все! Вы установили пропатченный интерпретатор Ruby.

h5. Установка из исходников

Этот процесс более сложный, но не чересчур. Если ранее вы ни разу не компилировали двоичные файлы Ruby, нижеследующее приведет к созданию двоичных файлов Ruby в вашей домашней директории.

h6. Скачать и извлечь

<shell>
$ mkdir rubygc
$ wget <the version you want from ftp://ftp.ruby-lang.org/pub/ruby>
$ tar -xzvf <ruby-version.tar.gz>
$ cd <ruby-version>
</shell>

h6. Применить патч

<shell>
$ curl http://github.com/wayneeseguin/rvm/raw/master/patches/ruby/1.9.2/p180/gcdata.patch | patch -p0 # if you're on 1.9.2!
$ curl http://github.com/wayneeseguin/rvm/raw/master/patches/ruby/1.8.7/ruby187gc.patch | patch -p0 # if you're on 1.8.7!
</shell>

h6. Настроить и установить

Следующее установит Ruby в директорию +/rubygc+ вашей домашней директории. Убедитесь, что заменили +&lt;homedir&gt;+ полным путем к вашей фактической домашней директории.

<shell>
$ ./configure --prefix=/<homedir>/rubygc
$ make && make install
</shell>

h6. Подготовить псевдонимы

Для удобства добавьте следующие строки в ваш +~/.profile+:

<shell>
alias gcruby='~/rubygc/bin/ruby'
alias gcrake='~/rubygc/bin/rake'
alias gcgem='~/rubygc/bin/gem'
alias gcirb='~/rubygc/bin/irb'
alias gcrails='~/rubygc/bin/rails'
</shell>

Не забудьте использовать псевдонимы с этого момента.

h6. Установить Rubygems (только 1.8!)

Скачайте "Rubygems":http://rubyforge.org/projects/rubygems и установите их из исходников. В файле Rubygems README имеются необходимые инструкции по установке. Отметьте, что этот шаг не является необходимым, если вы установили Ruby 1.9 и выше.

h4. Использование Ruby-Prof на MRI и REE

Добавьте Ruby-Prof в Gemfile вашего приложения, если хотите использовать бенчмаркинг/профилирование под MRI или REE:

<ruby>
gem 'ruby-prof', :path => 'git://github.com/wycats/ruby-prof.git'
</ruby>

теперь запустите +bundle install+ и все готово.

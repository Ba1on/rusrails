h1. Как работает I18n в Ruby on Rails

<p>Интернационализация это сложная проблема. Естественные языки отличаются во многих отношениях (например, в правилах образования множественного числа), поэтому трудно предоставить инструменты, решающие сразу все проблемы. По этой причине Rails I18n <span class="caps">API</span> сфокусировано на:</p>
<ul>
	<li>предоставления полной поддержки для английского и подобных ему языков</li>
	<li>легкой настраиваемости и полном расширении для других языков</li>
</ul>
<p>Как часть этого решения, <strong>каждая статичная строка в фреймворке Rails</strong> &#8212; например, валидационные сообщения Active Record, форматы времени и даты &#8212; <strong>стали интернационализированными</strong>, поэтому <em>локализация</em> приложения на Rails означает &#8220;переопределение&#8221; этих значений по умолчанию.</p>

<h4 id="the-overall-architecture-of-the-library">1. Общая архитектура библиотеки</h4>
<p>Таким образом, Ruby гем I18n разделен на две части:</p>
<ul>
	<li>Публичный <span class="caps">API</span> фреймворка i18n &#8212; модуль Ruby с публичными методами, определяющими как работает библиотека</li>
	<li>Бэкенд по умолчанию (который специально называется <em>простым</em> бэкендом), реализующий эти методы</li>
</ul>
<p>Как у пользователя, у вас всегда будет доступ только к публичным методам модуля I18n, но полезно знать о возможностях бэкенда.</p>
<div class='note'><p>Возможно (или даже желательно) поменять встроенный простой бэкенд на более мощный, который будет хранить данные перевода в реляционной базе данных, словаре GetText и тому подобном. Смотрите раздел <a href="/rails-internationalization-i18n-api/customize-your-i18n-setup">Использование различных бэкендов</a>.</p></div>

<h4 id="the-public-i18n-api">2. Публичный I18n <span class="caps">API</span></h4>
<p>Наиболее важными методами I18n <span class="caps">API</span> являются:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
translate # Ищет перевод текстов
localize  # Локализует объекты даты и времени в форматы локали
</pre></div>
<p>Имеются псевдонимы #t и #l, их можно использовать следующим образом:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
I18n.t 'store.title'
I18n.l Time.now
</pre></div>
<p>Также имеются методы чтения и записи для следующих атрибутов:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
load_path         # Анонсировать ваши пользовательские файлы с переводом
locale            # Получить и установить текущую локаль
default_locale    # Получить и установить локаль по умолчанию
exception_handler # Использовать иной exception_handler
backend           # Использовать иной бэкенд
</pre></div>
<p>Итак, давайте интернационализуем простое приложение на Rails с самого начала, в следующих главах!</p>
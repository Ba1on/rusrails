h1. Расширения для String

<h4 id="output-safety">1. Безопасность вывода</h4>

<h5>1.1 Мотивация</h5>
<p>Вставка данных в шаблоны <span class="caps">HTML</span> требует дополнительной заботы. Например, нельзя просто вставить <tt>@review.title</tt> на страницу <span class="caps">HTML</span>. С одной стороны, если заголовок рецензии &#8220;Flanagan &amp; Matz rules!&#8221; результат не будет правильным, поскольку амперсанд был экранирован как &#8220;&amp;amp;&#8221;. С другой стороны, в зависимости от вашего приложения может быть большая дыра в безопасности, поскольку пользователи могут внедрить злонамеренный <span class="caps">HTML</span>, устанавливающий специально изготовленный заголовок рецензии. Посмотрите <a href="/ruby-on-rails-security-guide/injection#cross-site-scripting-xss">раздел о межсайтовом скриптинге в Руководстве по безопасности</a> для подробной информации о рисках.</p>

<h5>1.2 Безопасные строки</h5>
<p>В Active Support есть концепция <i>(html) безопасных</i> строк, начиная с Rails 3. Безопасная строка это та, которая помечена как подлежащая вставке в <span class="caps">HTML</span> как есть. Ей доверяется, независимо от того, была она экранирована или нет.</p>
<p>Строки рассматриваются как <i>небезопасные</i> по умолчанию:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;&quot;.html_safe? # =&gt; false
</pre></div>
<p>Можно получить безопасную строку из заданной с помощью метода <tt>html_safe</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
s = &quot;&quot;.html_safe
s.html_safe? # =&gt; true
</pre></div>
<p>Важно понять, что <tt>html_safe</tt> не выполняет какого бы то не было экранирования, это всего лишь утверждение:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
s = &quot;&lt;script&gt;...&lt;/script&gt;&quot;.html_safe
s.html_safe? # =&gt; true
s            # =&gt; &quot;&lt;script&gt;...&lt;/script&gt;&quot;
</pre></div>
<p>Вы ответственны за обеспечение вызова <tt>html_safe</tt> на подходящей строке.</p>
<p>При присоединении к безопасной строке или с помощью <tt>concat</tt>/<tt>&lt;&lt;</tt>, или с помощью <tt>+</tt>, результат будет безопасной строкой. Небезопасные аргументы экранируются:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;&quot;.html_safe + &quot;&lt;&quot; # =&gt; &quot;&amp;lt;&quot;
</pre></div>
<p>Безопасные аргументы непосредственно присоединяются:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;&quot;.html_safe + &quot;&lt;&quot;.html_safe # =&gt; &quot;&lt;&quot;
</pre></div>
<p>Эти методы не должны использоваться в обычных вьюхах. В Rails 3 небезопасные значения автоматически экранируются:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
&lt;%= @review.title %&gt; &lt;%# прекрасно в Rails 3, экранируется,  если нужно %&gt;
</pre></div>
<p>Чтобы вставить что-либо дословно, используйте хелпер <tt>raw</tt> вместо вызова <tt>html_safe</tt>:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
&lt;%= raw @cms.current_template %&gt; &lt;%# вставляет @cms.current_template как есть %&gt;
</pre></div>
<p>Хелпер <tt>raw</tt> вызывает за вас хелпер <tt>html_safe</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
def raw(stringish)
  stringish.to_s.html_safe
end
</pre></div>
<div class='note'><p>Определенео в <tt>active_support/core_ext/string/output_safety.rb</tt>.</p></div>

<h5>1.3 Преобразование</h5>
<p>Как правило, за исключением разве что соединения, объясненного выше, любой метод, который может изменить строку, даст вам небезопасную строку. Это <tt>donwcase</tt>, <tt>gsub</tt>, <tt>strip</tt>, <tt>chomp</tt>, <tt>underscore</tt> и т.д.</p>
<p>В случае встроенного преобразования, такого как <tt>gsub!</tt>, получатель сам становится небезопансый the receiver itself becomes unsafe.</p>
<div class='note'><p>Бит безопасности всегда теряется, независимо от того, изменило ли что-то преобразование или нет.</p></div>

<h5>1.4 Конверсия и принуждение</h5>
<p>Вызов <tt>to_s</tt> на безопасной строке возвратит безопасную строку, но принуждение с помощью <tt>to_str</tt> возвратит небезопасную строку.</p>

<h5>1.5 Копирование</h5>
<p>Вызов <tt>dup</tt> или <tt>clone</tt> на безопасной строке создаст безопасные строки.</p>

<h4 id="squish">2. <tt>squish</tt></h4>
<p>Метод <tt>String#squish</tt> отсекает начальные и конечные пробелы и заменяет каждый ряд пробелов единственным пробелом:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot; \n  foo\n\r \t bar \n&quot;.squish # =&gt; &quot;foo bar&quot;
</pre></div>
<p>Также имеется разрушительная версия <tt>String#squish!</tt>.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/filters.rb</tt>.</p></div>

<h4 id="truncate">3. <tt>truncate</tt></h4>
<p>Метод <tt>truncate</tt> возвращает копию получателя, сокращенную после заданной <tt>длины</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Oh dear! Oh dear! I shall be late!&quot;.truncate(20)
# =&gt; &quot;Oh dear! Oh dear!...&quot;
</pre></div>
<p>Многоточие может быть настроено с помощью опции <tt>:omission</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Oh dear! Oh dear! I shall be late!&quot;.truncate(20, :omission =&gt; '&amp;hellip;')
# =&gt; &quot;Oh dear! Oh &amp;hellip;&quot;
</pre></div>
<p>Отметьте, что сокращение берет в счет длину строки omission.</p>
<p>Передайте <tt>:separator</tt> для сокращения строки по естественным разрывам:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Oh dear! Oh dear! I shall be late!&quot;.truncate(18)
# =&gt; &quot;Oh dear! Oh dea...&quot;
&quot;Oh dear! Oh dear! I shall be late!&quot;.truncate(18, :separator =&gt; ' ')
# =&gt; &quot;Oh dear! Oh...&quot;
</pre></div>
<p>В вышеуказанном примере &#8220;dear&#8221; обрезается сначала, а затем <tt>:separator</tt> предотвращает это.</p>
<div class='warning'><p>Опция <tt>:separator</tt> не может быть регулярным выражением.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/filters.rb</tt>.</p></div>

<h4>4. <tt>inquiry</tt></h4>

<p>Метод <tt>inquiry</tt> конвертирует строку в объект <tt>StringInquirer</tt>, позволяя красивые проверки.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
"production".inquiry.production? # => true
"active".inquiry.inactive?       # => false
</pre></div>

<h4 id="key-based-interpolation">5. Ключевая интерполяция</h4>
<p>В Ruby 1.9 оператор строки <tt>%</tt> поддерживает ключевую интерполяцию, и форматированную, и неформатированную:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Total is %&lt;total&gt;.02f&quot; % {:total =&gt; 43.1}  # =&gt; Total is 43.10
&quot;I say %{foo}&quot; % {:foo =&gt; &quot;wadus&quot;}          # =&gt; &quot;I say wadus&quot;
&quot;I say %{woo}&quot; % {:foo =&gt; &quot;wadus&quot;}          # =&gt; KeyError
</pre></div>
<p>Active Support добавляет эту функциональность <tt>%</tt> в предыдущие версии Ruby.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/interpolation.rb</tt>.</p></div>

<h4 id="starts_with-and-ends_width">6. <tt>starts_with?</tt> и <tt>ends_width?</tt></h4>
<p>Active Support определяет псевдонимы <tt>String#start_with?</tt> и <tt>String#end_with?</tt> (в связи с особенностями английской морфологии, изменяет глаголы в форму 3 лица):</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;foo&quot;.starts_with?(&quot;f&quot;) # =&gt; true
&quot;foo&quot;.ends_with?(&quot;o&quot;)   # =&gt; true
</pre></div>
<div class='note'><p>Определены в <tt>active_support/core_ext/string/starts_ends_with.rb</tt>.</p></div>

<h4 id="strip_heredoc">7. <tt>strip_heredoc</tt></h4>
<p>Метод <tt>strip_heredoc</tt> обрезает отступы в heredoc-ах.</p>
<p>Для примера в</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
if options[:usage]
  puts &lt;&lt;-USAGE.strip_heredoc
    This command does such and such.

    Supported options are:
      -h         This message
      ...
  USAGE
end
</pre></div>
<p>пользователь увидит используемое сообщение, выровненное по левому краю.</p>
<p>Технически это выглядит как выделение красной строки в отдельную строку и удаление всех впереди идущих пробелов.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/strip.rb</tt>.</p></div>

<h4 id="access">8. Доступ</h4>

<h5 id="at-position">8.1 <tt>at(position)</tt></h5>
<p>Возвращает символ строки на позиции <tt>position</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;hello&quot;.at(0)  # =&gt; &quot;h&quot;
&quot;hello&quot;.at(4)  # =&gt; &quot;o&quot;
&quot;hello&quot;.at(-1) # =&gt; &quot;o&quot;
&quot;hello&quot;.at(10) # =&gt; ERROR если &lt; 1.9, nil в 1.9
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/access.rb</tt>.</p></div>

<h5 id="from-position">8.2 <tt>from(position)</tt></h5>
<p>Возвращает подстроку строки, начинающуюся с позиции <tt>position</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;hello&quot;.from(0)  # =&gt; &quot;hello&quot;
&quot;hello&quot;.from(2)  # =&gt; &quot;llo&quot;
&quot;hello&quot;.from(-2) # =&gt; &quot;lo&quot;
&quot;hello&quot;.from(10) # =&gt; &quot;&quot; если &lt; 1.9, nil в 1.9
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/access.rb</tt>.</p></div>

<h5 id="to-position">8.3 <tt>to(position)</tt></h5>
<p>Возвращает подстроку строки с начала до позиции <tt>position</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;hello&quot;.to(0)  # =&gt; &quot;h&quot;
&quot;hello&quot;.to(2)  # =&gt; &quot;hel&quot;
&quot;hello&quot;.to(-2) # =&gt; &quot;hell&quot;
&quot;hello&quot;.to(10) # =&gt; &quot;hello&quot;
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/access.rb</tt>.</p></div>

<h5 id="first-limit-1">8.4 <tt>first(limit = 1)</tt></h5>
<p>Вызов <tt>str.first(n)</tt> эквивалентен <tt>str.to(n-1)</tt>, если <tt>n</tt> &gt; 0, и возвращает пустую строку для <tt>n</tt> == 0.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/access.rb</tt>.</p></div>

<h5 id="last-limit-1">8.5 <tt>last(limit = 1)</tt></h5>
<p>Вызов <tt>str.last(n)</tt> эквивалентен <tt>str.from(-n)</tt>, если <tt>n</tt> &gt; 0, и возвращает пустую строку для <tt>n</tt> == 0.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/access.rb</tt>.</p></div>

<h4 id="inflections">9. Изменения слов</h4>

<h5 id="pluralize">9.1 <tt>pluralize</tt></h5>
<p>Метод <tt>pluralize</tt> возвращает множественное число его получателя:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;table&quot;.pluralize     # =&gt; &quot;tables&quot;
&quot;ruby&quot;.pluralize      # =&gt; &quot;rubies&quot;
&quot;equipment&quot;.pluralize # =&gt; &quot;equipment&quot;
</pre></div>
<p>Как показывает предыдущий пример, Active Support знает некоторые неправильные множественные числа и неисчислимые существительные. Встроенные правила могут быть расширены в <tt>config/initializers/inflections.rb</tt>. Этот файл создается командой <tt>rails</tt> и имеет инструкции в комментариях.</p>
<p>Active Record использует этот метод для вычисления имени таблицы по умолчанию, соответствующей модели:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# active_record/base.rb
def undecorated_table_name(class_name = base_class.name)
  table_name = class_name.to_s.demodulize.underscore
  table_name = table_name.pluralize if pluralize_table_names
  table_name
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="singularize">9.2 <tt>singularize</tt></h5>
<p>Противоположность <tt>pluralize</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;tables&quot;.singularize    # =&gt; &quot;table&quot;
&quot;rubies&quot;.singularize    # =&gt; &quot;ruby&quot;
&quot;equipment&quot;.singularize # =&gt; &quot;equipment&quot;
</pre></div>
<p>Связи вычисляют имя соответствующего связанного класса по умолчанию используя этот метод:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# active_record/reflection.rb
def derive_class_name
  class_name = name.to_s.camelize
  class_name = class_name.singularize if collection?
  class_name
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="camelize">9.3 <tt>camelize</tt></h5>
<p>Метод <tt>camelize</tt> возвращает его получателя в стиле CamelCase:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;product&quot;.camelize    # =&gt; &quot;Product&quot;
&quot;admin_user&quot;.camelize # =&gt; &quot;AdminUser&quot;
</pre></div>
<p>Как правило, об этом методе думают, как о преобразующем пути в классы Ruby или имена модулей, где слэши разделяют пространства имен:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;backoffice/session&quot;.camelize # =&gt; &quot;Backoffice::Session&quot;
</pre></div>
<p>Например, Action Pack использует этот метод для загрузки класса, предоставляющего определенное хранилище сессии:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# action_controller/metal/session_management.rb
def session_store=(store)
  if store == :active_record_store
    self.session_store = ActiveRecord::SessionStore
  else
    @@session_store = store.is_a?(Symbol) ?
      ActionDispatch::Session.const_get(store.to_s.camelize) :
      store
  end
end
</pre></div>
<p><tt>camelize</tt> принимает необязательный аргумент, он может быть <tt>:upper</tt> (по умолчанию) или <tt>:lower</tt>. С последним первая буква остается прописной:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;visual_effect&quot;.camelize(:lower) # =&gt; &quot;visualEffect&quot;
</pre></div>
<p>Это удобно для вычисления имен методов в языке, следующем такому соглашению, например JavaScript.</p>
<div class='info'><p>Как правило можно рассматривать <tt>camelize</tt> как противоположность <tt>underscore</tt>, хотя имеются случаи, когда это не так: <tt>&#8220;SSLError&#8221;.underscore.camelize</tt> возвратит <tt>&#8220;SslError&#8221;</tt>. Для поддержки случаев, подобного этому, Active Support предлагает определить акронимы в <tt>config/initializers/inflections.rb</tt></p></div>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
ActiveSupport::Inflector.inflections do |inflect|
  inflect.acronym 'SSL'
end

"SSLError".underscore.camelize #=> "SSLError"
</pre></div>
<p><tt>camelize</tt> имеет псевдоним <tt>camelcase</tt>.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="underscore">9.4 <tt>underscore</tt></h5>
<p>Метод <tt>underscore</tt> идет обратным путем, от CamelCase к путям:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Product&quot;.underscore   # =&gt; &quot;product&quot;
&quot;AdminUser&quot;.underscore # =&gt; &quot;admin_user&quot;
</pre></div>
<p>Также преобразует &#8220;::&#8221; обратно в &#8220;/&#8221;:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Backoffice::Session&quot;.underscore # =&gt; &quot;backoffice/session&quot;
</pre></div>
<p>и понимает строки, начинающиеся с прописной буквы:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;visualEffect&quot;.underscore # =&gt; &quot;visual_effect&quot;
</pre></div>
<p>хотя <tt>underscore</tt> не принимает никакие аргументы.</p>
<p>Автозагрузка классов и модулей Rails использует <tt>underscore</tt> для вывода относительного пути без расширения файла, определяющего заданную отсутствующую константу:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# active_support/dependencies.rb
def load_missing_constant(from_mod, const_name)
  ...
  qualified_name = qualified_name_for from_mod, const_name
  path_suffix = qualified_name.underscore
  ...
end
</pre></div>
<div class='info'><p>Как правило, рассматривайте <tt>underscore</tt> как противоположность <tt>camelize</tt>, хотя имеются случаи, когда это не так. Например, <tt>&#8220;SSLError&#8221;.underscore.camelize</tt> возвратит <tt>&#8220;SslError&#8221;</tt>.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="titleize">9.5 <tt>titleize</tt></h5>
<p>Метод <tt>titleize</tt> озаглавит слова в получателе:</p>
<div class="code_container"><code class="ruby">
&quot;alice in wonderland&quot;.titleize # =&gt; &quot;Alice In Wonderland&quot;
&quot;fermat's enigma&quot;.titleize     # =&gt; &quot;Fermat's Enigma&quot;
</code></div>
<p><tt>titleize</tt> имеет псевдоним <tt>titlecase</tt>.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="dasherize">9.6 <tt>dasherize</tt></h5>
<p>Метод <tt>dasherize</tt> заменяет подчеркивания в получателе дефисами:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;name&quot;.dasherize         # =&gt; &quot;name&quot;
&quot;contact_data&quot;.dasherize # =&gt; &quot;contact-data&quot;
</pre></div>
<p>Сериализатор <span class="caps">XML</span> моделей использует этот метод для форматирования имен узлов:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# active_model/serializers/xml.rb
def reformat_name(name)
  name = name.camelize if camelize?
  dasherize? ? name.dasherize : name
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="demodulize">9.7 <tt>demodulize</tt></h5>
<p>Для заданной строки с правильным выражением ссылки на константу, <tt>demodulize</tt> возвращает само имя константы, то есть правой части этого:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Product&quot;.demodulize                        # =&gt; &quot;Product&quot;
&quot;Backoffice::UsersController&quot;.demodulize    # =&gt; &quot;UsersController&quot;
&quot;Admin::Hotel::ReservationUtils&quot;.demodulize # =&gt; &quot;ReservationUtils&quot;
</pre></div>
<p>Active Record к примеру, использует этот метод для вычисления имени столбца кэширования счетчика:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# active_record/reflection.rb
def counter_cache_column
  if options[:counter_cache] == true
    &quot;#{active_record.name.demodulize.underscore.pluralize}_count&quot;
  elsif options[:counter_cache]
    options[:counter_cache]
  end
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="parameterize">9.8 <tt>parameterize</tt></h5>
<p>Метод <tt>parameterize</tt> нормализует получателя способом, который может использоваться в красивых URL.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;John Smith&quot;.parameterize # =&gt; &quot;john-smith&quot;
&quot;Kurt Gödel&quot;.parameterize # =&gt; &quot;kurt-godel&quot;
</pre></div>
<p>Фактически результирующая строка оборачивается в экземпляр <tt>ActiveSupport::Multibyte::Chars</tt>.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="tableize">9.9 <tt>tableize</tt></h5>
<p>Метод <tt>tableize</tt> это <tt>underscore</tt> следующий за <tt>pluralize</tt>.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Person&quot;.tableize      # =&gt; &quot;people&quot;
&quot;Invoice&quot;.tableize     # =&gt; &quot;invoices&quot;
&quot;InvoiceLine&quot;.tableize # =&gt; &quot;invoice_lines&quot;
</pre></div>
<p>как правило, <tt>tableize</tt> возвращает имя таблицы, соответствующей заданной модели для простых случаев. В действительности фактическое применение в Active Record не является прямым <tt>tableize</tt>, так как он также демодулизирует имя класса и проверяет несколько опций, которые могут повлиять на возвращаемую строку.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="classify">9.10 <tt>classify</tt></h5>
<p>Метод <tt>classify</tt> является противоположностью <tt>tableize</tt>. Он выдает имя класса, соответствующего имени таблицы:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;people&quot;.classify        # =&gt; &quot;Person&quot;
&quot;invoices&quot;.classify      # =&gt; &quot;Invoice&quot;
&quot;invoice_lines&quot;.classify # =&gt; &quot;InvoiceLine&quot;
</pre></div>
<p>Метод понимает правильные имена таблицы:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;highrise_production.companies&quot;.classify # =&gt; &quot;Company&quot;
</pre></div>
<p>Отметьте, что <tt>classify</tt> возвращает имя класса как строку. Можете получить фактический объект класса, вызвав <tt>constantize</tt> на ней, как объяснено далее.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="constantize">9.11 <tt>constantize</tt></h5>
<p>Метод <tt>constantize</tt> решает выражение, ссылающееся на константу, в его получателе:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;Fixnum&quot;.constantize # =&gt; Fixnum

module M
  X = 1
end
&quot;M::X&quot;.constantize # =&gt; 1
</pre></div>
<p>Если строка определяет неизвестную константу, или ее содержимое даже не является валидным именем константы, <tt>constantize</tt> вызывает <tt>NameError</tt>.</p>
<p>Анализ имени константы с помощью <tt>constantize</tt> начинается всегда с верхнего уровня <tt>Object</tt>, даже если нет предшествующих &#8220;::&#8221;.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
X = :in_Object
module M
  X = :in_M

  X                 # =&gt; :in_M
  &quot;::X&quot;.constantize # =&gt; :in_Object
  &quot;X&quot;.constantize   # =&gt; :in_Object (!)
end
</pre></div>
<p>Таким образом, в общем случае это не эквивалентно тому, что Ruby сделал бы в том же месте, когда вычислял настоящую константу.</p>
<p>Тестовые случаи рассыльщика получают тестируемый рассыльщик из имени класса теста, используя <tt>constantize</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# action_mailer/test_case.rb
def determine_default_mailer(name)
  name.sub(/Test$/, '').constantize
rescue NameError =&gt; e
  raise NonInferrableMailerError.new(name)
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="humanize">9.12 <tt>humanize</tt></h5>
<p>Метод <tt>humanize</tt> дает осмысленное имя для отображения имени атрибута. Для этого он заменяет подчеркивания пробелами, убирает любой суффикс &#8220;_id&#8221; и озаглавливает первое слово:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;name&quot;.humanize           # =&gt; &quot;Name&quot;
&quot;author_id&quot;.humanize      # =&gt; &quot;Author&quot;
&quot;comments_count&quot;.humanize # =&gt; &quot;Comments count&quot;
</pre></div>
<p>Метод хелпера <tt>full_messages</tt> использует <tt>humanize</tt> как резервный способ для включения имен атрибутов:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
def full_messages
  full_messages = []

  each do |attribute, messages|
    ...
    attr_name = attribute.to_s.gsub('.', '_').humanize
    attr_name = @base.class.human_attribute_name(attribute, :default =&gt; attr_name)
    ...
  end

  full_messages
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h5 id="foreign_key">9.13 <tt>foreign_key</tt></h5>
<p>Метод <tt>foreign_key</tt> дает имя столбца внешнего ключа из имени класса. Для этого он демодулизирует, подчеркивает и добавляет &#8220;_id&#8221;:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;User&quot;.foreign_key           # =&gt; &quot;user_id&quot;
&quot;InvoiceLine&quot;.foreign_key    # =&gt; &quot;invoice_line_id&quot;
&quot;Admin::Session&quot;.foreign_key # =&gt; &quot;session_id&quot;
</pre></div>
<p>Передайте аргуемент false, если не хотите подчеркивание в &#8220;_id&#8221;:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;User&quot;.foreign_key(false) # =&gt; &quot;userid&quot;
</pre></div>
<p>Связи используют этот метод для вывода внешних ключей, например <tt>has_one</tt> и <tt>has_many</tt> делают так:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# active_record/associations.rb
foreign_key = options[:foreign_key] || reflection.active_record.name.foreign_key
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/inflections.rb</tt>.</p></div>

<h4 id="string-conversions">10. Конвертирование</h4>

<h5 id="ord">10.1 <tt>ord</tt></h5>
<p>Ruby 1.9 определяет <tt>ord</tt> как кодовую точку (codepoint) первого символа получателя. Active Support портирует <tt>ord</tt> для однобайтовой кодировки, подобной <span class="caps">ASCII</span> или <span class="caps">ISO</span>-8859-1, в Ruby 1.8:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;a&quot;.ord # =&gt; 97
&quot;à&quot;.ord # =&gt; 224, in ISO-8859-1
</pre></div>
<p>В Ruby 1.8 <tt>ord</tt> не работает в целом в строках UTF8, используйте мультибайтную поддержку в Active Support для этого:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;a&quot;.mb_chars.ord # =&gt; 97
&quot;à&quot;.mb_chars.ord # =&gt; 224, in UTF8
</pre></div>
<p>Отметьте, что 224 различное в обоих примерах. В <span class="caps">ISO</span>-8859-1 &#8220;à&#8221; представлен как отдельный байт, 224. Его односимвольное представление в UTF8 имеет два байта, названных 195 и 160, но его кодовая точка в Unicode 224. Если вызвать <tt>ord</tt> на строке UTF8 &#8220;à&#8221; вернувшимся значением будет 195 в Ruby 1.8. Это не ошибка, поскольку UTF8 не поддерживается, сам вызов будет фиктивным.</p>
<div class='info'><p><tt>ord</tt> это эквивалент <tt>getbyte(0)</tt>.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/conversions.rb</tt>.</p></div>

<h5 id="getbyte">10.2 <tt>getbyte</tt></h5>
<p>Active Support портирует <tt>getbyte</tt> из Ruby 1.9:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;foo&quot;.getbyte(0)  # =&gt; 102, same as &quot;foo&quot;.ord
&quot;foo&quot;.getbyte(1)  # =&gt; 111
&quot;foo&quot;.getbyte(9)  # =&gt; nil
&quot;foo&quot;.getbyte(-1) # =&gt; 111
</pre></div>
<div class='info'><p><tt>getbyte</tt> это эквивалент <tt>[]</tt>.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/conversions.rb</tt>.</p></div>

<h5 id="to_date-to_time-to_datetime">10.3 <tt>to_date</tt>, <tt>to_time</tt>, <tt>to_datetime</tt></h5>
<p>Методы <tt>to_date</tt>, <tt>to_time</tt> и <tt>to_datetime</tt> в основном удобные обертки около <tt>Date._parse</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;2010-07-27&quot;.to_date              # =&gt; Tue, 27 Jul 2010
&quot;2010-07-27 23:37:00&quot;.to_time     # =&gt; Tue Jul 27 23:37:00 UTC 2010
&quot;2010-07-27 23:37:00&quot;.to_datetime # =&gt; Tue, 27 Jul 2010 23:37:00 +0000
</pre></div>
<p><tt>to_time</tt> получает необязательный аргумент <tt>:utc</tt> или <tt>:local</tt>, для указания, в какой временной зоне вы хотите время:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&quot;2010-07-27 23:42:00&quot;.to_time(:utc)   # =&gt; Tue Jul 27 23:42:00 UTC 2010
&quot;2010-07-27 23:42:00&quot;.to_time(:local) # =&gt; Tue Jul 27 23:42:00 +0200 2010
</pre></div>
<p>По умолчанию <tt>:utc</tt>.</p>
<p>Пожалуйста, обратитесь к документации по <tt>Date._parse</tt> для детальных подробностей.</p>
<div class='info'><p>Все три возвратят <tt>nil</tt> для пустых получателей.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/string/conversions.rb</tt>.</p></div>
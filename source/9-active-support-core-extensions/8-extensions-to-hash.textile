h1. Расширения для Hash

<h4 id="hash-conversions">1. Конверсия</h4>

<h5 id="hash-to-xml">1.1 <tt>to_xml</tt></h5>
<p>Метод <tt>to_xml</tt> возвращает строку, содержащую представление <span class="caps">XML</span> его получателя:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{&quot;foo&quot; =&gt; 1, &quot;bar&quot; =&gt; 2}.to_xml
# =&gt;
# &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
# &lt;hash&gt;
#   &lt;foo type=&quot;integer&quot;&gt;1&lt;/foo&gt;
#   &lt;bar type=&quot;integer&quot;&gt;2&lt;/bar&gt;
# &lt;/hash&gt;
</pre></div>
<p>Для этого метод в цикле проходит пары и создает узлы, зависимые от <em>value</em>. Для заданной пары <tt>key</tt>, <tt>value</tt>:</p>
<ul>
	<li>Если <tt>value</tt> хэш, происходит рекурсивный вызов с <tt>key</tt> как <tt>:root</tt>.</li>
</ul>
<ul>
	<li>Если <tt>value</tt> массив, происходит рекурсивный вызов с <tt>key</tt> как <tt>:root</tt> и <tt>key</tt> в единственном числе как <tt>:children</tt>.</li>
</ul>
<ul>
	<li>Если <tt>value</tt> вызываемый объект, он должен ожидать один или два аргумента. В зависимости от ситуации, вызываемый объект вызывается с помощью хэша <tt>options</tt> в качестве первого аргумента с <tt>key</tt> как <tt>:root</tt>, и <tt>key</tt> в единственном числе в качестве второго аргумента. Возвращенное значение становится новым узлом.</li>
</ul>
<ul>
	<li>Если <tt>value</tt> откликается на <tt>to_xml</tt>, метод вызывается с <tt>key</tt> как <tt>:root</tt>.</li>
</ul>
<ul>
	<li>В иных случаях, создается узел с <tt>key</tt> в качестве тега, со строковым представлением <tt>value</tt> в качестве текстового узла. Если <tt>value</tt> является <tt>nil</tt>, добавляется атрибут &#8220;nil&#8221;, установленный в &#8220;true&#8221;. Кроме случаев, когда существует опция <tt>:skip_types</tt>, являющаяся true, добавляется атрибут &#8220;type&#8221;, соответствующий следующему преобразованию:</li>
</ul>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
XML_TYPE_NAMES = {
  &quot;Symbol&quot;     =&gt; &quot;symbol&quot;,
  &quot;Fixnum&quot;     =&gt; &quot;integer&quot;,
  &quot;Bignum&quot;     =&gt; &quot;integer&quot;,
  &quot;BigDecimal&quot; =&gt; &quot;decimal&quot;,
  &quot;Float&quot;      =&gt; &quot;float&quot;,
  &quot;TrueClass&quot;  =&gt; &quot;boolean&quot;,
  &quot;FalseClass&quot; =&gt; &quot;boolean&quot;,
  &quot;Date&quot;       =&gt; &quot;date&quot;,
  &quot;DateTime&quot;   =&gt; &quot;datetime&quot;,
  &quot;Time&quot;       =&gt; &quot;datetime&quot;
}
</pre></div>
<p>По умолчанию корневым узлом является &#8220;hash&#8221;, но это настраивается с помощью опции <tt>:root</tt>.</p>
<p>По умолчанию билдер <span class="caps">XML</span> является новым экземпляром <tt>Builder::XmlMarkup</tt>. Можно настроить свой собственный билдер с помощью опции <tt>:builder</tt>. Метод также принимает опции, такие как <tt>:dasherize</tt> со товарищи, они перенаправляются в билдер.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/conversions.rb</tt>.</p></div>

<h4 id="merging">2. Объединение</h4>
<p>В Ruby имеется встроенный метод <tt>Hash#merge</tt>, объединяющий два хэша:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1, :b =&gt; 1}.merge(:a =&gt; 0, :c =&gt; 2)
# =&gt; {:a =&gt; 0, :b =&gt; 1, :c =&gt; 2}
</pre></div>
<p>Active Support определяет больше способов объединения хэшей, которые могут быть полезными.</p>

<h5 id="reverse_merge-and-reverse_merge">2.1 <tt>reverse_merge</tt> и <tt>reverse_merge!</tt></h5>
<p>В случае коллизии, в <tt>merge</tt> побеждает ключ в хэше аргумента. Можно компактно предоставить хэш опций со значением по умолчанию с помощью такой идиомы:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
options = {:length =&gt; 30, :omission =&gt; &quot;...&quot;}.merge(options)
</pre></div>
<p>Active Support определяет <tt>reverse_merge</tt> в случае, если нужна альтернативная запись:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
options = options.reverse_merge(:length =&gt; 30, :omission =&gt; &quot;...&quot;)
</pre></div>
<p>И восклицательная версия <tt>reverse_merge!</tt>, выполняющая объединение на месте:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
options.reverse_merge!(:length =&gt; 30, :omission =&gt; &quot;...&quot;)
</pre></div>
<div class='warning'><p>Обратите внимание, что <tt>reverse_merge!</tt> может изменить хэш в вызывающем методе, что может как быть, так и не быть хорошей идеей.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/reverse_merge.rb</tt>.</p></div>

<h5 id="reverse_update">2.2 <tt>reverse_update</tt></h5>
<p>Метод <tt>reverse_update</tt> это псевдоним для <tt>reverse_merge!</tt>, описанного выше.</p>
<div class='warning'><p>Отметьте, что у <tt>reverse_update</tt> нет восклицательного знака.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/reverse_merge.rb</tt>.</p></div>

<h5 id="deep_merge-and-deep_merge">2.3 <tt>deep_merge</tt> и <tt>deep_merge!</tt></h5>
<p>Как видите в предыдущем примере, если ключ обнаруживается в обоих хэшах, один из аргументов побеждает.</p>
<p>Active Support определяет <tt>Hash#deep_merge</tt>. В углубленном объединении, если обнаруживается ключ в обоих хэшах, и их значения также хэши, то их <em>merge</em> становиться значением в результирующем хэше:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; {:b =&gt; 1}}.deep_merge(:a =&gt; {:c =&gt; 2})
# =&gt; {:a =&gt; {:b =&gt; 1, :c =&gt; 2}}
</pre></div>
<p>Метод <tt>deep_merge!</tt> выполняет углубленное объединение на месте.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/deep_merge.rb</tt>.</p></div>

<h4 id="diffing">3. Определение различий</h4>
<p>Метод <tt>diff</tt> возвращает хэш, представляющий разницу между получателем и аргументом, с помощью следующей логики:</p>
<ul>
	<li>Пары <tt>key</tt>, <tt>value</tt>, существующие в обоих хэшах, не принадлежат хэшу различий.</li>
</ul>
<ul>
	<li>Если оба хэша имеют <tt>key</tt>, но с разными значениями, побеждает пара в получателе.</li>
</ul>
<ul>
	<li>Остальное просто объединяется.</li>
</ul>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1}.diff(:a =&gt; 1)
# =&gt; {}, первое правило

{:a =&gt; 1}.diff(:a =&gt; 2)
# =&gt; {:a =&gt; 1}, второе правило

{:a =&gt; 1}.diff(:b =&gt; 2)
# =&gt; {:a =&gt; 1, :b =&gt; 2}, третье правило

{:a =&gt; 1, :b =&gt; 2, :c =&gt; 3}.diff(:b =&gt; 1, :c =&gt; 3, :d =&gt; 4)
# =&gt; {:a =&gt; 1, :b =&gt; 2, :d =&gt; 4}, все правила

{}.diff({})        # =&gt; {}
{:a =&gt; 1}.diff({}) # =&gt; {:a =&gt; 1}
{}.diff(:a =&gt; 1)   # =&gt; {:a =&gt; 1}
</pre></div>
<p>Важным свойством этого хэша различий является то, что можно получить оригинальный хэш, применив <tt>diff</tt> дважды:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
hash.diff(hash2).diff(hash2) == hash
</pre></div>
<p>Хэши различий могут быть полезны, к примеру, для сообщений об ошибке, относящихся к ожидаемым хэшам опций.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/diff.rb</tt>.</p></div>

<h4 id="working-with-keys">4. Работа с ключами</h4>

<h5 id="except-and-except">4.1 <tt>except</tt> и <tt>except!</tt></h5>
<p>Метод <tt>except</tt> возвращает хэш с убранными ключами, содержащимися в перечне аргументов, если они существуют:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1, :b =&gt; 2}.except(:a) # =&gt; {:b =&gt; 2}
</pre></div>
<p>Если получатель откликается на <tt>convert_key</tt>, метод вызывается на каждом из аргументов. Это позволяет <tt>except</tt> хорошо обращаться с хэшами с индифферентым доступом, например:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1}.with_indifferent_access.except(:a)  # =&gt; {}
{:a =&gt; 1}.with_indifferent_access.except(&quot;a&quot;) # =&gt; {}
</pre></div>
<p>Метод <tt>except</tt> может прийти на помощь, например, когда хотите защитить некоторый параметр, который не может быть глобально защищен с помощью <tt>attr_protected</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
params[:account] = params[:account].except(:plan_id) unless admin?
@account.update_attributes(params[:account])
</pre></div>
<p>Также имеется восклицательный вариант <tt>except!</tt>, который убирает ключи в самом получателе.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/except.rb</tt>.</p></div>

<h5 id="stringify_keys-and-stringify_keys">4.2 <tt>stringify_keys</tt> и <tt>stringify_keys!</tt></h5>
<p>Метод <tt>stringify_keys</tt> возвращает хэш, в котором ключи получателя приведены к строке. Это выполняется с помощью применения к ним <tt>to_s</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{nil =&gt; nil, 1 =&gt; 1, :a =&gt; :a}.stringify_keys
# =&gt; {&quot;&quot; =&gt; nil, &quot;a&quot; =&gt; :a, &quot;1&quot; =&gt; 1}
</pre></div>
<p>Результат в случае коллизии неопределен:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{&quot;a&quot; =&gt; 1, :a =&gt; 2}.stringify_keys
# =&gt; {&quot;a&quot; =&gt; 2}, в моем тесте, хотя на этот результат нельзя полагаться
</pre></div>
<p>Метод может быть полезным, к примеру, для простого принятия и символов, и строк как опций. Например, <tt>ActionView::Helpers::FormHelper</tt> определяет:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
def to_check_box_tag(options = {}, checked_value = &quot;1&quot;, unchecked_value = &quot;0&quot;)
  options = options.stringify_keys
  options[&quot;type&quot;] = &quot;checkbox&quot;
  ...
end
</pre></div>
<p>Вторая строка может безопасно обращаться к ключу &#8220;type&#8221; и позволяет пользователю передавать или <tt>:type</tt>, или &#8220;type&#8221;.</p>
<p>Также имеется восклицательный вариант <tt>stringify_keys!</tt>, который приводит к строке ключи в самом получателе.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/keys.rb</tt>.</p></div>

<h5 id="symbolize_keys-and-symbolize_keys">4.3 <tt>symbolize_keys</tt> и <tt>symbolize_keys!</tt></h5>
<p>Метод <tt>symbolize_keys</tt> возвращает хэш, в котором ключи получателя приведены к символам там, где это возможно. Это выполняется с помощью применения к ним <tt>to_sym</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{nil =&gt; nil, 1 =&gt; 1, &quot;a&quot; =&gt; &quot;a&quot;}.symbolize_keys
# =&gt; {1 =&gt; 1, nil =&gt; nil, :a =&gt; &quot;a&quot;}
</pre></div>
<div class='warning'><p>Отметьте в предыдущем примере, что только один ключ был приведен к символу.</p></div>
<p>Результат в случае коллизии неопределен:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{&quot;a&quot; =&gt; 1, :a =&gt; 2}.symbolize_keys
# =&gt; {:a =&gt; 2}, в моем тесте, хотя на этот результат нельзя полагаться
</pre></div>
<p>Метод может быть полезным, к примеру, для простого принятия и символов, и строк как опций. Например, <tt>ActionController::UrlRewriter</tt> определяет</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
def rewrite_path(options)
  options = options.symbolize_keys
  options.update(options[:params].symbolize_keys) if options[:params]
  ...
end
</pre></div>
<p>Вторая строка может безопасно обращаться к ключу <tt>:params</tt> и позволяет пользователю передавать или <tt>:params</tt>, или &#8220;params&#8221;.</p>
<p>Также имеется восклицательный вариант <tt>symbolize_keys!</tt>, который приводит к символу ключи в самом получателе.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/keys.rb</tt>.</p></div>

<h5 id="to_options-and-to_options">4.4 <tt>to_options</tt> и <tt>to_options!</tt></h5>
<p>Методы <tt>to_options</tt> и <tt>to_options!</tt> соответствующие псевдонимы <tt>symbolize_keys</tt> и <tt>symbolize_keys!</tt>.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/keys.rb</tt>.</p></div>

<h5 id="assert_valid_keys">4.5 <tt>assert_valid_keys</tt></h5>
<p>Метод <tt>assert_valid_keys</tt> получает определенное число аргументов и проверяет, имеет ли получатель хоть один ключ вне этого белого списка. Если имеет, вызывается <tt>ArgumentError</tt>.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1}.assert_valid_keys(:a)  # passes
{:a =&gt; 1}.assert_valid_keys(&quot;a&quot;) # ArgumentError
</pre></div>
<p>Active Record не принимает незнакомые опции при создании связей, к примеру. Он реализует такой контроль через <tt>assert_valid_keys</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
mattr_accessor :valid_keys_for_has_many_association
@@valid_keys_for_has_many_association = [
  :class_name, :table_name, :foreign_key, :primary_key,
  :dependent,
  :select, :conditions, :include, :order, :group, :having, :limit, :offset,
  :as, :through, :source, :source_type,
  :uniq,
  :finder_sql, :counter_sql,
  :before_add, :after_add, :before_remove, :after_remove,
  :extend, :readonly,
  :validate, :inverse_of
]

def create_has_many_reflection(association_id, options, &amp;extension)
  options.assert_valid_keys(valid_keys_for_has_many_association)
  ...
end
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/keys.rb</tt>.</p></div>

<h4 id="slicing">5. Вырезание (slicing)</h4>
<p>В Ruby есть встроенная поддержка для вырезания строк или массивов. Active Support расширяет вырезание на хэши:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1, :b =&gt; 2, :c =&gt; 3}.slice(:a, :c)
# =&gt; {:c =&gt; 3, :a =&gt; 1}

{:a =&gt; 1, :b =&gt; 2, :c =&gt; 3}.slice(:b, :X)
# =&gt; {:b =&gt; 2} # несуществующие ключи игнорируются
</pre></div>
<p>Если получатель откликается на <tt>convert_key</tt>, ключи нормализуются:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1, :b =&gt; 2}.with_indifferent_access.slice(&quot;a&quot;)
# =&gt; {:a =&gt; 1}
</pre></div>
<div class='note'><p>Вырезание может быть полезным для экранизации хэшей опций с помощью белого списка ключей.</p></div>
<p>Также есть <tt>slice!</tt>, который  выполняет вырезание на месте, возвращая то, что было убрано:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
hash = {:a =&gt; 1, :b =&gt; 2}
rest = hash.slice!(:a) # =&gt; {:b =&gt; 2}
hash                   # =&gt; {:a =&gt; 1}
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/slice.rb</tt>.</p></div>

<h4 id="indifferent-access">6. Индифферентный доступ</h4>
<p>Метод <tt>with_indifferent_access</tt> возвращает <tt>ActiveSupport::HashWithIndifferentAccess</tt> его получателя:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
{:a =&gt; 1}.with_indifferent_access[&quot;a&quot;] # =&gt; 1
</pre></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/hash/indifferent_access.rb</tt>.</p></div>
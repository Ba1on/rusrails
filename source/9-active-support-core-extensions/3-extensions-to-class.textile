h1. Расширения для Class

<h4 id="class-attributes">1. Атрибуты класса</h4>

<h5 id="class_attribute">1.1 <tt>class_attribute</tt></h5>
<p>Метод <tt>class_attribute</tt> объявляет один или более наследуемых атрибутов класса, которые могут быть переопределены на низшем уровне в иерархии:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class A
  class_attribute :x
end

class B &lt; A; end

class C &lt; B; end

A.x = :a
B.x # =&gt; :a
C.x # =&gt; :a

B.x = :b
A.x # =&gt; :a
C.x # =&gt; :b

C.x = :c
A.x # =&gt; :a
B.x # =&gt; :b
</pre></div>
<p>Например, <tt>ActionMailer::Base</tt> определяет:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class_attribute :default_params
self.default_params = {
  :mime_version =&gt; &quot;1.0&quot;,
  :charset      =&gt; &quot;UTF-8&quot;,
  :content_type =&gt; &quot;text/plain&quot;,
  :parts_order  =&gt; [ &quot;text/plain&quot;, &quot;text/enriched&quot;, &quot;text/html&quot; ]
}.freeze
</pre></div>
<p>К ним также есть доступ, и они могут быть переопределены на уровне экземпляра:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
A.x = 1

a1 = A.new
a2 = A.new
a2.x = 2

a1.x # =&gt; 1, comes from A
a2.x # =&gt; 2, overridden in a2
</pre></div>
<p>Создание райтер-метода экземпляра может быть отключено установлением опции <tt>:instance_writer</tt> в false, как в</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
module AcitveRecord
  class Base
    class_attribute :table_name_prefix, :instance_writer =&gt; false
    self.table_name_prefix = &quot;&quot;
  end
end
</pre></div>
<p>В модели такая опция может быть полезной как способ предотвращения массового назначения для установки атрибута.</p>
<p>Для удобства <tt>class_attribute</tt> определяет также условие экземпляра, являющееся двойным отрицанием того, что возвращает ридер экземпляра. В вышеописанном примере оно может вызываться <tt>x?</tt>.</p>
<p>Когда <tt>instance_reader</tt> равен <tt>false</tt>, условие экземпляра возвратит <tt>NoMethodError</tt>, как и метод ридера.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/class/attribute.rb</tt></p></div>

<h5 id="cattr_reader-cattr_writer-and-cattr_accessor">1.2 <tt>cattr_reader</tt>, <tt>cattr_writer</tt> и <tt>cattr_accessor</tt></h5>
<p>Макросы <tt>cattr_reader</tt>, <tt>cattr_writer</tt> и <tt>cattr_accessor</tt> являются аналогами их коллег <tt>attr_*</tt>, но для классов. Они инициализируют переменную класса как <tt>nil</tt>, если она уже существует, и создают соответствующие методы класса для доступа к ней:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class MysqlAdapter &lt; AbstractAdapter
  # Generates class methods to access @@emulate_booleans.
  cattr_accessor :emulate_booleans
  self.emulate_booleans = true
end
</pre></div>
<p>Методы экземпляра также создаются для удобства, они всего лишь прокси к атрибуту класса. Таким образом, экземпляры могут менять атрибут класса, но не могут переопределить его, как это происходит в случае с <tt>class_attribute</tt> (смотрите выше). К примеру, задав</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
module ActionView
  class Base
    cattr_accessor :field_error_proc
    @@field_error_proc = Proc.new{ ... }
  end
end
</pre></div>
<p>мы получим доступ к <tt>field_error_proc</tt> во вьюхах.</p> 
<p>Создание ридер-метода экземпляра предотвращается установкой <tt>:instance_reader</tt> в <tt>false</tt> и создание райтер-метода экземпляра предотвращается установкой <tt>:instance_writer</tt> в <tt>false</tt>. Создание обоих методов предотвращается установкой <tt>:instance_accessor</tt> в <tt>false</tt>. Во всех случаях, должно быть не любое ложное значение, а именно <tt>false</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
module A
  class B
    # No first_name instance reader is generated.
    cattr_accessor :first_name, :instance_reader => false
    # No last_name= instance writer is generated.
    cattr_accessor :last_name, :instance_writer => false
    # No surname instance reader or surname= writer is generated.
    cattr_accessor :surname, :instance_accessor => false
  end
end
</pre></div>
<p>В модели может быть полезным установить <tt>:instance_accessor</tt> в <tt>false</tt> как способ предотвращения массового назначения для установки атрибута.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/class/attribute_accessors.rb</tt>.</p></div>

<h4 id="class-inheritable-attributes">2. Наследуемые атрибуты класса</h4>
<div class='warning'><p>Наследуемые атрибуты класса устарели. Рекомендовано использовать вместо них <tt>Class#class_attribute</tt>.</p></div>
<p>Переменные класса передаются вниз по дереву наследования. Переменные экземпляра класса не передаются, но и не наследуются. Макросы <tt>class_inheritable_reader</tt>, <tt>class_inheritable_writer</tt> и <tt>class_inheritable_accessor</tt> предоставляют средства доступа к данным на уровне класса, которые наследуются, но не передаются детям:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
module ActionController
  class Base
    # FIXME: REVISE/SIMPLIFY THIS COMMENT.
    # The value of allow_forgery_protection is inherited,
    # but its value in a particular class does not affect
    # the value in the rest of the controllers hierarchy.
    class_inheritable_accessor :allow_forgery_protection
  end
end
</pre></div>
<p>Они осуществляют это с помощью переменных экземпляра класса и клонирования их в субклассы, тут не вовлекаются переменные класса. Клонирование выполняется с помощью <tt>dup</tt> до тех пор, пока значение дублируемое.</p>
<p>Имеется несколько вариантов, специализирующихся на массивах и хэшах:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class_inheritable_array
class_inheritable_hash
</pre></div>
<p>Эти райтеры принимают во внимание любой наследуемый массив или хэш и расширяют, а не перезаписывают их.</p>
<p>Как и чистые средства доступа к атрибуту класса, эти макросы создают удобные методы экземпляра для чтения и записи. Создание райтер-метода экземпляра можно отключить установив <tt>:instance_writer</tt> в <tt>false</tt> (не любое ложное значение, а именно <tt>false</tt>):</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
module ActiveRecord
  class Base
    class_inheritable_accessor :default_scoping, :instance_writer =&gt; false
  end
end
</pre></div>
<p>Так как значения копируются, когда определяется субкласс, если основной класс изменяет атрибут после этого, субкласс не видит новое значение. Вот в чем вопрос.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/class/inheritable_attributes.rb</tt>.</p></div>

<h4 id="subclasses-descendants">3. Субклассы и потомки</h4>

<h5 id="subclasses">3.1 <tt>subclasses</tt></h5>
<p>Метод <tt>subclasses</tt> возвращает субклассы получателя:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class C; end
C.subclasses # =&gt; []

class B &lt; C; end
C.subclasses # =&gt; [B]

class A &lt; B; end
C.subclasses # =&gt; [B]

class D &lt; C; end
C.subclasses # =&gt; [B, D]
</pre></div>
<p>Порядок, в котором эти классы возвращаются, неопределен.</p>
<div class='warning'><p>Этот метод переопределяет некоторые основные классы Rails, но все это должно стать совместимым в Rails 3.1.</p></div>
<div class='note'><p>Определено в <tt>active_support/core_ext/class/subclasses.rb</tt>.</p></div>

<h5 id="descendants">3.2 <tt>descendants</tt></h5>
<p>Метод <tt>descendants</tt> возвращает все классы, которые являются <tt>&lt;</tt> к его получателю:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class C; end
C.descendants # =&gt; []

class B &lt; C; end
C.descendants # =&gt; [B]

class A &lt; B; end
C.descendants # =&gt; [B, A]

class D &lt; C; end
C.descendants # =&gt; [B, A, D]
</pre></div>
<p>Порядок, в котором эти классы возвращаются, неопределен.</p>
<div class='note'><p>Определено в <tt>active_support/core_ext/class/subclasses.rb</tt>.</p></div>
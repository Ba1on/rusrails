h1. Отладка с помощью ruby-debug

<p>Когда ваш код ведет себя неожиданным образом, можете печатать в логи или консоль, чтобы выявить проблему. К сожалению, иногда бывает, что такой способ отслеживания ошибки не эффективен в поиске причины проблемы. Когда вы фактически нуждаетесь в путешествии вглубь исполняемого кода, отладчик - это ваш лучший напарник.</p>
<p>Отладчик также может помочь, если хотите изучить исходный код Rails, но не знаете с чего начать. Просто отладьте любой запрос к своему приложению и используйте это руководство для изучения, как идет движение от написанного вами кода глубже в код Rails.</p>

<h4 id="setup">1. Установка</h4>
<p>Отладчик, используемый Rails, <tt>ruby-debug</tt>, поставляется как гем. Чтобы установить его, просто запустите:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
$ sudo gem install ruby-debug
</pre></div>
<div class='note'><p>Если вы используете Ruby 1.9, можно установить совместимую версию <tt>+ruby-debug</tt>, запустив <tt>sudo gem install ruby-debug19</tt> </p></div>
<p>В случае, если вы хотите загрузить особую версию или получить исходный код, обратитесь к <a href="http://rubyforge.org/projects/ruby-debug/">странице проекта на rubyforge</a>.</p>
<p>В Rails есть встроенная поддержка ruby-debug, начиная с Rails 2.0. Внутри любого приложения на Rails можно вызывать отладчик, вызвав метод <tt>debugger</tt>.</p>
<p>Вот пример:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class PeopleController &lt; ApplicationController
  def new
    debugger
    @person = Person.new
  end
end
</pre></div>
<p>Если видите сообщение в консоли или логах:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
***** Debugger requested, but was not available: Start server with --debugger to enable *****
</pre></div>
<p>Убедитесь, что Вы запустили свой веб сервер с опцией <tt>--debugger</tt>:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
~/PathTo/rails_project$ rails server --debugger
=&gt; Booting Mongrel (use 'rails server webrick' to force WEBrick)
=&gt; Rails 3.0.0 application starting on http://0.0.0.0:3000
=&gt; Debugger enabled
...
</pre></div>
<div class='info'><p>В режиме development можно динамически вызвать <tt>require 'ruby-debug'</tt> вместо перезапуска сервера, если он был запущен без <tt>--debugger</tt>.</p></div>

<h4 id="the-shell">2. Среда</h4>
<p>Как только приложение вызывает метод <tt>debugger</tt>, отладчик будет запущен в среде отладчика в окне терминала, в котором запущен сервер приложения, и будет представлена строка ruby-debug <tt>(rdb:n)</tt>. <em>n</em> это число нитей (thread). Строка также показывает следующую линию кода, которая ожидает выполнения.</p>
<p>Если был получен запрос от браузера, закладка браузера, содержащая запрос, будет висеть, пока отладчик не закончит, и трассировка не закончит обрабатывать весь запрос.</p>
<p>Например:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
@posts = Post.all
(rdb:7)
</pre></div>
<p>Настало время изучить и покопаться в вашем приложении. Для начала хорошо бы попросить помощь у отладчика... поэтому напишите: <tt>help</tt> (Неожиданно, правда?)</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:7) help
ruby-debug help v0.10.2
Type 'help &lt;command-name&gt;' for help on a specific command

Available commands:
backtrace  delete   enable  help    next  quit     show    trace
break      disable  eval    info    p     reload   source  undisplay
catch      display  exit    irb     pp    restart  step    up
condition  down     finish  list    ps    save     thread  var
continue   edit     frame   method  putl  set      tmate   where
</pre></div>
<div class='info'><p>Чтобы просмотреть помощь для любой команды , используйте <tt>help <имя команды></tt> в активном режиме отладки. Например: <em><tt>help var</tt></em></p></div>
<p>Следующая команда, которую мы изучим, одна из самых полезных: <tt>list</tt>. Также можно сокращать команды ruby-debug, предоставляя только достаточные буквы для отличения их от других команд, поэтому можно использовать <tt>l</tt> для команды <tt>list</tt>.</p>
<p>Эта команда показывает, где вы сейчас в коде, печатая 10 линий с текущей линией в центре; текущая линия в этом случая шестая и помеченная <tt>=></tt>.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:7) list
[1, 10] in /PathToProject/posts_controller.rb
   1  class PostsController < ApplicationController
   2    # GET /posts
   3    # GET /posts.json
   4    def index
   5      debugger
=> 6      @posts = Post.all
   7
   8      respond_to do |format|
   9        format.html # index.html.erb
   10        format.json { render :json => @posts }
</pre></div>
<p>Если повторите команду <tt>list</tt>, сейчас уже используем лишь <tt>l</tt>, будут выведены следующие 10 линий файла.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:7) l
[11, 20] in /PathTo/project/app/controllers/posts_controller.rb
   11      end
   12    end
   13
   14    # GET /posts/1
   15    # GET /posts/1.json
   16    def show
   17      @post = Post.find(params[:id])
   18
   19      respond_to do |format|
   20        format.html # show.html.erb
</pre></div>
<p>И так далее до конца текущего файла. Когда достигнут конец файла, команда <tt>list</tt> запустится снова с начала файла и продолжится опять до конца, обрабатывая файл как цикличный буфер.</p>

<p>С другой стороны, чтобы увидеть предыдущие десять линий, следует написать <tt>list-</tt> или <tt>l-</tt>.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:7) l-
[1, 10] in /PathToProject/posts_controller.rb
   1  class PostsController < ApplicationController
   2    # GET /posts
   3    # GET /posts.json
   4    def index
   5      debugger
   6      @posts = Post.all
   7
   8      respond_to do |format|
   9        format.html # index.html.erb
   10        format.json { render :json => @posts }
</pre></div>
<p>Таким образом можно перемещаться внутри файла, просматривая код до и после строки, в которую вы добавили <tt>debugger</tt>. Наконец, чтобы снова увидеть, где вы в коде сейчас, можно написать <tt>list=</tt>.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:7) list=
[1, 10] in /PathToProject/posts_controller.rb
   1  class PostsController < ApplicationController
   2    # GET /posts
   3    # GET /posts.json
   4    def index
   5      debugger
=> 6      @posts = Post.all
   7
   8      respond_to do |format|
   9        format.html # index.html.erb
   10        format.json { render :json => @posts }
</pre></div>

<h4 id="the-context">3. Контекст</h4>
<p>Когда начинаете отладку своего приложения, вы будете помещены в различные контексты, так как проходите через различные части стека.</p>
<p>ruby-debug создает контекст, когда достигается точка останова или событие. У контекста есть информация о приостановленной программе, которая позволяет отладчику просматривать кадр стека, значения переменных с точки зрения отлаживаемой программы, и в нем содержится информация о месте, в котором отлаживаемая программа остановилась.</p>
<p>В любое время можете вызвать команду <tt>backtrace</tt> (или ее псевдоним <tt>where</tt>), чтобы напечатать трассировку приложения. Это полезно для того, чтобы знать, где вы есть. Если вы когда-нибудь задумывались, как вы получили что-то в коде, то <tt>backtrace</tt> предоставит ответ.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:5) where
    #0 PostsController.index
       at line /PathTo/project/app/controllers/posts_controller.rb:6
    #1 Kernel.send
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/base.rb:1175
    #2 ActionController::Base.perform_action_without_filters
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/base.rb:1175
    #3 ActionController::Filters::InstanceMethods.call_filters(chain#ActionController::Fil...,...)
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/filters.rb:617
...
</pre></div>
<p>Можете перейти, куда хотите в этой трассировке (это изменит контекст) с использованием команды <tt>frame _n_</tt>, где <em>n</em> это определенный номер кадра.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:5) frame 2
#2 ActionController::Base.perform_action_without_filters
       at line /PathTo/project/vendor/rails/actionpack/lib/action_controller/base.rb:1175
</pre></div>
<p>Доступные переменные те же самые, как если бы вы запускали код строка за строкой. В конце концов, это то, что отлаживается.</p>
<p>Перемещение по кадру стека: можете использовать команды <tt>up [n]</tt> (скоращенно <tt>u</tt>) и <tt>down [n]</tt> для того, чтобы изменить контекст на <em>n</em> кадров вверх или вниз по стеку соответственно. <em>n</em> по умолчанию равно одному. Up в этом случае перейдет к кадрам стека с большим номером, а down к кадрам с меньшим номером.</p>

<h4 id="threads">4. Нити (threads)</h4>
<p>Отладчик может просматривать, останавливать, возобновлять и переключаться между запущенными нитями с использованием команды <tt>thread</tt> (или сокращенно <tt>th</tt>). У этой команды есть несколько опций:</p>
<ul>
	<li><tt>thread</tt> показывает текущую нить</li>
	<li><tt>thread list</tt> используется для отображения всех нитей и их статусов. Символ плюс + и число показывают текущую нить выполнения.</li>
	<li><tt>thread stop _n_</tt> останавливает нить <em>n</em>.</li>
	<li><tt>thread resume _n_</tt> возобновляет нить <em>n</em>.</li>
	<li><tt>thread switch _n_</tt> переключает контекст текущей нити на <em>n</em>.</li>
</ul>
<p>Эта команда очень полезна, в частности когда вы отлаживаете параллельные нити и нужно убедиться, что в коде нет состояния гонки.</p>

<h4 id="inspecting-variables">5. Просмотр переменных</h4>
<p>Любое выражение может быть вычислено в текущем контексте. Чтобы вычислить выражение,  просто напечатайте его!</p>
<p>Этот пример покажет, как можно напечатать instance_variables, определенные в текущем контексте:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
@posts = Post.all
(rdb:11) instance_variables
["@_response", "@action_name", "@url", "@_session", "@_cookies", "@performed_render", "@_flash", "@template", "@_params", "@before_filter_chain_aborted", "@request_origin", "@_headers", "@performed_redirect", "@_request"]
</pre></div>
<p>Как вы уже поняли, отображены все переменные, к которым есть доступ из контроллера. Этот перечень динамически обновляется по мере выполнения кода. Например, запустим следующую строку, используя <tt>next</tt> (мы рассмотрим эту команду чуть позднее в этом руководстве).</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:11) next
Processing PostsController#index (for 127.0.0.1 at 2008-09-04 19:51:34) [GET]
  Session ID: BAh7BiIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNoSGFzaHsABjoKQHVzZWR7AA==--b16e91b992453a8cc201694d660147bba8b0fd0e
  Parameters: {&quot;action&quot;=&gt;&quot;index&quot;, &quot;controller&quot;=&gt;&quot;posts&quot;}
/PathToProject/posts_controller.rb:8
respond_to do |format|
</pre></div>
<p>И затем снова спросим instance_variables:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:11) instance_variables.include? &quot;@posts&quot;
true
</pre></div>
<p>Теперь <tt>@posts</tt> включена в переменные экземпляра, поскольку определяющая ее строка была выполнена.</p>
<div class='info'><p>Также можно шагнуть в режим <strong>irb</strong> с командой <tt>irb</tt> (конечно!). Таким образом, сессия irb будет запущена в контексте, который ее вызвал. Но предупреждаем: это эксперементальная особенность.</p></div>
<p>Метод <tt>var</tt> это более удобный способ показать переменные и их значения:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
var
(rdb:1) v[ar] const &lt;object&gt;            показывает константы объекта
(rdb:1) v[ar] g[lobal]                  показывает глобальные переменные
(rdb:1) v[ar] i[nstance] &lt;object&gt;       показывает переменные экземпляра объекта
(rdb:1) v[ar] l[ocal]                   показывает локальные переменные
</pre></div>
<p>Это отличный способ просмотреть значения переменных текущего контекста. Например:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:9) var local
  __dbg_verbose_save =&gt; false
</pre></div>
<p>Также можно просмотреть метод объекта следующим образом:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:9) var instance Post.new
@attributes = {&quot;updated_at&quot;=&gt;nil, &quot;body&quot;=&gt;nil, &quot;title&quot;=&gt;nil, &quot;published&quot;=&gt;nil, &quot;created_at&quot;...
@attributes_cache = {}
@new_record = true
</pre></div>
<div class='info'><p>Команды <tt>p</tt> (print) и <tt>pp</tt> (pretty print) могут использоваться для вычисления выражений Ruby и отображения значения переменных в консоли.</p></div>
<p>Можете также использовать <tt>display</tt> для запуска просмотра переменных. Это хороший способ трассировки значений переменной на протяжении выполнения.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:1) display @recent_comments
1: @recent_comments =
</pre></div>
<p>Переменные в отображаемом перечне будут печататься с их значениями после помещения в стек. Чтобы остановить отображение переменной, используйте <tt>undisplay _n_</tt>, где <em>n</em> это номер переменной (1 в последнем примере).</p>

<h4 id="step-by-step">6 Шаг за шагом</h4>
<p>Теперь вы знаете, где находитесь в запущенной трассировке, и способны напечатать доступные переменные. Давайте продолжим и ознакомимся с выполнением приложения.</p>
<p>Используйте <tt>step</tt> (сокращенно <tt>s</tt>) для продолжения запуска вашей программы до следующей логической точки останова и возврата контроля ruby-debug.</p>
<div class='info'><p>Также можно использовать <tt>step</tt> <em>n</em><tt> и </tt>step- _n_+ для движения вперед или назад на <em>n</em> шагов соответственно.</p></div>
<p>Также можете использовать <tt>next</tt>, которая похожа на step, но вызовы функции или метода, выполняемые в строке кода, выполняются без остановки. Как и со step, можно использовать знак плюса для перемещения на <em>n</em> шагов.</p>
<p>Разница между <tt>next</tt> и <tt>step</tt> в том, что <tt>step</tt> останавливается на следующей линии выполняемого кода, делая лишь один шаг, в то время как <tt>next</tt> перемещает на следующую строку без входа внутрь методов.</p>
<p>Например, рассмотрим этот блок кода с включенным выражением <tt>debugger</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class Author &lt; ActiveRecord::Base
  has_one :editorial
  has_many :comments

  def find_recent_comments(limit = 10)
    debugger
    @recent_comments ||= comments.where("created_at > ?", 1.week.ago).limit(limit)
  end
end
</pre></div>
<div class='info'><p>Можете использовать ruby-debug при использовании <tt>rails console</tt>. Просто не забудьте вызвать <tt>require "ruby-debug"</tt> перед вызовом метода <tt>debugger</tt>.</p></div>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
/PathTo/project $ rails console
Loading development environment (Rails 3.1.0)
&gt;&gt; require &quot;ruby-debug&quot;
=&gt; []
&gt;&gt; author = Author.first
=&gt; #&lt;Author id: 1, first_name: &quot;Bob&quot;, last_name: &quot;Smith&quot;, created_at: &quot;2008-07-31 12:46:10&quot;, updated_at: &quot;2008-07-31 12:46:10&quot;&gt;
&gt;&gt; author.find_recent_comments
/PathTo/project/app/models/author.rb:11
)
</pre></div>
<p>С остановленным кодом, давайте оглянемся:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:1) list
+[2, 9] in /PathTo/project/app/models/author.rb
   2    has_one :editorial
   3    has_many :comments
   4
   5    def find_recent_comments(limit = 10)
   6      debugger
=> 7      @recent_comments ||= comments.where("created_at > ?", 1.week.ago).limit(limit)
   8    end
   9  end
</pre></div>
<p>Вы в конце линии, но была ли эта линия выполнена? Можете просмотреть переменные экземпляра.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:1) var instance
@attributes = {&quot;updated_at&quot;=&gt;&quot;2008-07-31 12:46:10&quot;, &quot;id&quot;=&gt;&quot;1&quot;, &quot;first_name&quot;=&gt;&quot;Bob&quot;, &quot;las...
@attributes_cache = {}
</pre></div>
<tt>@recent_comments</tt> пока еще не определена, поэтому ясно, что эта линия еще не выполнялась. Используем команду <tt>next</tt> для движения дальше по коду:
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:1) next
/PathTo/project/app/models/author.rb:12
@recent_comments
(rdb:1) var instance
@attributes = {&quot;updated_at&quot;=&gt;&quot;2008-07-31 12:46:10&quot;, &quot;id&quot;=&gt;&quot;1&quot;, &quot;first_name&quot;=&gt;&quot;Bob&quot;, &quot;las...
@attributes_cache = {}
@comments = []
@recent_comments = []
</pre></div>
<p>Теперь мы видим, что связь <tt>@comments</tt> была загружена и @recent_comments определена, поскольку линия была выполнена.</p>
<p>Если хотите войти глубже в трассировку стека, можете переместиться на один шаг <tt>step</tt>, через ваши вызывающие методы и в код Rails. Это лучший способ поиска багов в вашем коде, а возможно и в Ruby or Rails.</p>

<h4 id="breakpoints">7. Точки останова</h4>
<p>Точка останова останавливает ваше приложение, когда достигается определенная точка в программе. В этой линии вызывается оболочка отладчика.</p>
<p>Можете добавлять точки останова динамически с помощью команды <tt>break</tt> (или просто <tt>b</tt>). Имеются 3 возможных способа ручного добавления точек останова:</p>
<ul>
	<li><tt>break line</tt>: устанавливает точку останова в линии <em>line</em> в текущем файле исходника.</li>
	<li><tt>break file:line [if expression]</tt>: устанавливает точку останова в линии номер <em>line</em> в файле <em>file</em>. Если задано условие <em>expression</em>, оно должно быть вычислено и равняться <em>true</em>, чтобы запустить отладчик.</li>
	<li><tt>break class(.|#)method [if expression]</tt>: устанавливает точку останова в методе <em>method</em> (. и # для метода класса и экземпляра соответственно), определенного в классе <em>class</em>. <em>expression</em> работает так же, как и с file:line.</li>
</ul>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:5) break 10
Breakpoint 1 file /PathTo/project/vendor/rails/actionpack/lib/action_controller/filters.rb, line 10
</pre></div>
<p>Используйте <tt>info breakpoints _n_</tt> или <tt>info break _n_</tt> для отображения перечня точек останова. Если укажете номер, отобразится только эта точка останова. В противном случае отобразятся все точки останова.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:5) info breakpoints
Num Enb What
  1 y   at filters.rb:10
</pre></div>
<p>Чтобы удалить точки останова: используйте команду <tt>delete _n_</tt> для устранения точки останова номер <em>n</em>. Если номер не указан, удалятся все точки останова, которые в данный момент активны..</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
(rdb:5) delete 1
(rdb:5) info breakpoints
No breakpoints.
</pre></div>
<p>Также можно включить или отключить точки останова:</p>
<ul>
	<li><tt>enable breakpoints</tt>: позволяет перечню <em>breakpoints</em> или всем им, если перечень не определен, останавливать Вашу программу. Это состояние по умолчанию для создаваемых точек останова.</li>
	<li><tt>disable breakpoints</tt>: <em>breakpoints</em> не будут влиять на Вашу программу.</li>
</ul>

<h4 id="catching-exceptions">8. Вылов исключений</h4>
<p>Команда <tt>catch exception-name</tt> (или просто <tt>cat exception-name</tt>) может использоваться для перехвата исключения типа <em>exception-name</em>, когда в противном случае был бы вызван обработчик для него.</p>
<p>Чтобы просмотреть все активные точки перехвата, используйте <tt>catch</tt>.</p>

<h4 id="resuming-execution">9. Возобновление исполнения</h4>
<p>Есть два способа возобновления выполнения приложения, которое было остановлено отладчиком:</p>
<ul>
	<li><tt>continue</tt> [line-specification] (или <tt>c</tt>): возобновляет выполнение программы с адреса, где Ваш скрипт был последний раз остановлен; любые точки останова, установленные на этом адресе будут пропущены. Дополнительный аргумент line-specification позволяет Вам определить число линий для установки одноразовой точки останова, которая удаляется после того, как эта точка будет достигнута.</li>
	<li><tt>finish</tt> [frame-number] (или <tt>fin</tt>): выполняет, пока не возвратится выделенный кадр стека. Если номер кадра не задан, приложение будет запущено пока не возвратиться текущий выделенный кадр. Текущий выделенный кадр начинается от самых последних, или с 0, если позиционирование кадров (т.е. up, down или frame) не было выполнено. Если задан номер кадра, будет выполняться, пока не вернется указанный кадр.</li>
</ul>

<h4 id="editing">10. Редактирование</h4>
<p>Две команды позволяют открыть код из отладчика в редакторе:</p>
<ul>
	<li><tt>edit [file:line]</tt>: редактирует файл <em>file</em>, используя редактор, определенный переменной среды <span class="caps">EDITOR</span>. Определенная линия <em>line</em> также может быть задана.</li>
	<li><tt>tmate _n_</tt> (сокращенно <tt>tm</tt>): открывает текущий файл в TextMate. Она использует n-ный кадр, если задан <em>n</em>.</li>
</ul>

<h4 id="quitting">11. Выход</h4>
<p>Чтобы выйти из отладчика, используйте команду <tt>quit</tt> (сокращенно <tt>q</tt>), или ее псевдоним <tt>exit</tt>.</p>
<p>Простой выход пытается прекратить все нити в результате. Поэтому ваш сервер будет остановлен и нужно будет стартовать его снова.</p>

<h4 id="settings">12. Настройки</h4>
<p>Есть несколько настроек, которые могут быть сконфигурированы в ruby-debug, чтобы облегчить отладку Вашего кода. Вот несколько доступных опций:</p>
<ul>
	<li><tt>set reload</tt>: презагрузить исходный код при изменении.</li>
	<li><tt>set autolist</tt>: Запускать команду <tt>list</tt> на каждой точке останова.</li>
	<li><tt>set listsize _n_</tt>: Установить количество линий кода для отображения по умолчанию <em>n</em>.</li>
	<li><tt>set forcestep</tt>: Убеждаться, что команды <tt>next</tt> и <tt>step</tt> всегда переходят на новую линию</li>
</ul>
<p>Можно просмотреть полный перечень, используя <tt>help set</tt>. Используйте <tt>help set _subcommand_</tt> для изучения определенной команды <tt>set</tt>.</p>
<div class='info'><p>Любые эти настройки можно включить в файл <tt>.rdebugrc</tt> в директории <span class="caps">HOME</span>. ruby-debug считывает этот файл каждый раз, как загружается и он настроит себя соответствующе.</p></div>
<p>Вот хорошее начало для <tt>.rdebugrc</tt>:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
set autolist
set forcestep
set listsize 25
</pre></div>
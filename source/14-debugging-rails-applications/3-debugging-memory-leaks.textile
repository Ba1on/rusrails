h1. Отладка утечки памяти

<p>Приложение Ruby (на Rails или нет), может съедать память &#8211; или в коде Ruby, или на уровне кода C.</p>
<p>В этом разделе Вы научитесь, как находить и исправлять такие утечки, используя инструменты отладки BleakHouse и Valgrind.</p>

<h4 id="bleakhouse">1. BleakHouse</h4>
<p><a href="http://github.com/fauna/bleak_house/tree/master">BleakHouse</a> Это библиотека для обнаружения утечек памяти.</p>
<p>Если объект Ruby не выходит за область видимости, Ruby Garbage Collector не очистит его, пока на него ссылаются где-то еще. Утечки, подобные этой, могут понемногу расти, и Ваше приложение будет потреблять все больши и больше памяти, постепенно влияя на общую производительность системы. Этот инструмент поможет найти утечки в куче Ruby.</p>
<p>Чтобы установить его, запустите:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
sudo gem install bleak_house
</pre></div>
<p>Затем настройте приложение для профилирования. Затем добавьте следующее в конец config/environment.rb:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
require 'bleak_house' if ENV['BLEAK_HOUSE']
</pre></div>
<p>Запустите экземпляр сервера со встроенным BleakHouse:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
RAILS_ENV=production BLEAK_HOUSE=1 ruby-bleak-house rails server
</pre></div>
<p>Убедитесь, что были запущены сотни запросов, чтобы получить лучшие образцы данных, затем нажмите <tt>CTRL-C</tt>. Сервер остановится и Bleak House создаст файл дампа в <tt>/tmp</tt>:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
** BleakHouse: working...
** BleakHouse: complete
** Bleakhouse: run 'bleak /tmp/bleak.5979.0.dump' to analyze.
</pre></div>
<p>Чтобы его проанализировать, просто запустите команду listed. Будут отображены 20 наиболее съедающих память строк:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
  191691 total objects
  Final heap size 191691 filled, 220961 free
  Displaying top 20 most common line/class pairs
  89513 __null__:__null__:__node__
  41438 __null__:__null__:String
  2348 /opt/local//lib/ruby/site_ruby/1.8/rubygems/specification.rb:557:Array
  1508 /opt/local//lib/ruby/gems/1.8/specifications/gettext-1.90.0.gemspec:14:String
  1021 /opt/local//lib/ruby/gems/1.8/specifications/heel-0.2.0.gemspec:14:String
   951 /opt/local//lib/ruby/site_ruby/1.8/rubygems/version.rb:111:String
   935 /opt/local//lib/ruby/site_ruby/1.8/rubygems/specification.rb:557:String
   834 /opt/local//lib/ruby/site_ruby/1.8/rubygems/version.rb:146:Array
  ...
</pre></div>
<p>Таким образом, можно найти, где ваше приложение съедает память, и исправить это.</p>
<p>Если <a href="http://github.com/fauna/bleak_house/tree/master">BleakHouse</a> не сообщает о каком-либо росте кучи, но у вас все равно наблюдается рост занимаемой памяти, скорее всего у вас неисправное расширение на C, или настоящая утечка в интерпретаторе. В этом случае, попробуйте использовать Valgrind для дальнейшего исследования.</p>

<h4 id="valgrind">2. Valgrind</h4>
<p><a href="http://valgrind.org/">Valgrind</a> это приложение для Linux для обнаружения утечек памяти, основанных на C, и гонки условий.</p>
<p>Имеются инструменты Valgrind, которые могут автоматически обнаруживать многие баги управления памятью и нитями, и подробно профилировать Ваши программы. Например, расширение C в интерпретаторе вызывает <tt>malloc()</tt>, но не вызывает должным образом <tt>free()</tt>, эта память не будет доступна, пока приложение не будет остановлено.</p>
<p>Чтобы узнать подробности, как установить Valgrind и использовать его с Ruby, обратитесь к <a href="http://blog.evanweaver.com/articles/2008/02/05/valgrind-and-ruby/">Valgrind and Ruby</a> by Evan Weaver.</p>
h1. Подробная информация по связи has_one

Связь +has_one+ создает соответствие один-к-одному с другой моделью. В терминах базы данных эта связь сообщает, что другой класс содержит внешний ключ. Если этот класс содержит внешний ключ, следует использовать +belongs_to+.

h4. Методы, добавляемые +has_one+

Когда объявляете связь +has_one+, объявляющий класс автоматически получает четыре метода, относящихся к связи:
* <tt><em>association</em>(force_reload = false)</tt>
* <tt><em>association</em>=(associate)</tt>
* <tt>build_<em>association</em>(attributes = {})</tt>
* <tt>create_<em>association</em>(attributes = {})</tt>

Во всех этих методах <tt><em>association</em></tt> заменяется на символ, переданный как первый аргумент в +has_one+. Например, имеем объявление:

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account
end
</ruby>

Каждый экземпляр модели +Supplier+ будет иметь эти методы:

<ruby>
account
account=
build_account
create_account
</ruby>

NOTE: При устанавлении новой связи +has_one+ или +belongs_to+, следует использовать префикс +build_+ для построения связи, в отличие от метода +association.build+, используемого для связей +has_many+ или +has_and_belongs_to_many+. Чтобы создать связь, используйте префикс +create_+.

h5(#has_one-association). <tt><em>association</em>(force_reload = false)</tt>

Метод <tt><em>association</em></tt> возвращает связанный объект, если таковой имеется. Если связанный объект не найден, возвращает +nil+.

<ruby>
@account = @supplier.account
</ruby>

Если связанный объект уже был получен из базы данных для этого объекта, возвращается кэшированная версия. Чтобы переопределить это поведение (и заставить прочитать из базы данных), передайте +true+ как аргумент +force_reload+.

h5(#has_one-association_equal). <tt><em>association</em>=(associate)</tt>

Метод <tt><em>association</em>=</tt> привязывает связанный объект к этому объекту. Фактически это означает извлечение первичного ключа этого объекта и присвоение его значения внешнему ключу связанного объекта.

<ruby>
@supplier.account = @account
</ruby>

h5(#has_one-build_association). <tt>build_<em>association</em>(attributes = {})</tt>

Метод <tt>build_<em>association</em></tt> возвращает новый объект связанного типа. Этот объект будет экземпляром с переданными атрибутами, и будет установлена связь через внешний ключ, но связанный объект _не_ будет пока сохранен.

<ruby>
@account = @supplier.build_account(:terms => "Net 30")
</ruby>

h5(#has_one-create_association). <tt>create_<em>association</em>(attributes = {})</tt>

Метод <tt>create_<em>association</em></tt> возвращает новый объект связанного типа. Этот объект будет экземпляром с переданными атрибутами, будет установлена связь через внешний ключ, и, если он пройдет валидации, определенные в связанной модели, связанный объект _будет_ сохранен

<ruby>
@account = @supplier.create_account(:terms => "Net 30")
</ruby>

h4. Опции для +has_one+

Хотя Rails использует разумные значения по умолчанию, работающие во многих ситуациях, бывают случаи, когда хочется изменить поведение связи +has_one+. Такая настройка легко выполнима с помощью передачи опции при создании связи. Например, эта связь использует две такие опции:

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account, :class_name => "Billing", :dependent => :nullify
end
</ruby>

Связь +has_one+ поддерживает эти опции:

* +:as+
* +:autosave+
* +:class_name+
* +:conditions+
* +:dependent+
* +:foreign_key+
* +:include+
* +:order+
* +:primary_key+
* +:readonly+
* +:select+
* +:source+
* +:source_type+
* +:through+
* +:validate+

h5(#has_one-as). +:as+

Установка опции +:as+ показывает, что это полиморфная связь. Полиморфные связи подробно рассматривались "ранее":/active-record-associations/the-types-of-associations-2#polymorphic-associations.

h5(#has_one-autosave). +:autosave+

Если установить опцию +:autosave+ в +true+, это сохранит любые загруженные члены и уничтожит члены, помеченные для уничтожения, всякий раз, когда вы сохраните родительский объект.

h5(#has_one-class_name). +:class_name+

Если имя другой модели не может быть образовано из имени связи, можете использовать опцию +:class_name+ для предоставления имени модели. Например, если поставщик имеет аккаунт, но фактическое имя модели, содержащей аккаунты, это +Billing+, можете установить это следующим образом:

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account, :class_name => "Billing"
end
</ruby>

h5(#has_one-conditions). +:conditions+

Опция +:conditions+ позволяет определить условия, которым должен удовлетворять связанный объект (в синтаксисе SQL, используемом в условии  +WHERE+).

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account, :conditions => "confirmed = 1"
end
</ruby>

h5(#has_one-dependent). +:dependent+

Если установите опцию +:dependent+ как +:destroy+, то удаление этого объекта вызовет метод +destroy+ для связанного объекта для его удаления. Если установить опцию +:dependent+ как +:delete+, то удаление этого объекта удалит связанный объект _без_ вызова его метода +destroy+. Если установите опцию +:dependent+ как +:nullify+, то удаление этого объекта установит внешний ключ связанного объекта как +NULL+.

h5(#has_one-foreign_key). +:foreign_key+

По соглашению Rails предполагает, что столбец, используемый для хранения внешнего ключа в этой модели, имеет имя модели с добавленным суффиксом +_id+. Опция +:foreign_key+ позволяет установить имя внешнего ключа явно:

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account, :foreign_key => "supp_id"
end
</ruby>

TIP: В любом случае, Rails не создаст столбцы внешнего ключа за вас. Вам необходимо явно определить их в своих миграциях.

h5(#has_one-include). +:include+

Можете использовать опцию +:include+ для определения связей второго порядка, которые должны быть нетерпеливо загружены, когда эта связь используется. Например, рассмотрим эти модели:

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account
end

class Account < ActiveRecord::Base
  belongs_to :supplier
  belongs_to :representative
end

class Representative < ActiveRecord::Base
  has_many :accounts
end
</ruby>

Если вы часто получаете представителей непосредственно из поставщиков (+@supplier.account.representative+), то можете сделать свой код более эффективным, включив представителей в связь между поставщиками и аккаунтами:

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account, :include => :representative
end

class Account < ActiveRecord::Base
  belongs_to :supplier
  belongs_to :representative
end

class Representative < ActiveRecord::Base
  has_many :accounts
end
</ruby>

h5(#has_one-order). +:order+

Опция +:order+ предписывает порядок, в котором связанные объекты будут получены (в синтаксисе SQL, используемом в условии +ORDER BY+). Так как связь +has_one+ получает только один связанный объект, в этой опции нет необходимости.

h5(#has_one-primary_key). +:primary_key+

По соглашению, Rails предполагает, что столбец, используемый для хранения первичного ключа, это +id+. Вы можете переопределить это и явно определить первичный ключ с помощью опции +:primary_key+.

h5(#has_one-readonly). +:readonly+

Если установите опцию +:readonl+ в +true+, то связанный объект будет доступен только для чтения, когда получен посредством связи.

h5(#has_one-select). +:select+

Опция +:select+ позволяет переопределить SQL условие +SELECT+, которое используется для получения данных о связанном объекте. По умолчанию Rails получает все столбцы.

h5(#has_one-source). +:source+

Опция +:source+ определяет имя источника связи для связи +has_one :through+.

h5(#has_one-source_type). +:source_type+

Опция +:source_type+ определяет тип источника связи для связи +has_one :through+, который действует при полиморфной связи.

h5(#has_one-through). +:through+

Опция +:through+ определяет соединительную модель, через которую выполняется запрос. Связи +has_one :through+ подробно рассматривались "ранее":/active-record-associations/the-types-of-associations-1#the-has-one-through-association.

h5(#has_one-validate). +:validate+

Если установите опцию +:validate+ в +true+, тогда связанные объекты будут проходить валидацию всякий раз, когда вы сохраняете этот объект. По умолчанию она равна +false+: связанные объекты не проходят валидацию, когда этот объект сохраняется.

h4(#has_one-do_any_associated_objects_exist). Существуют ли связанные объекты?

Можно увидеть, существует ли какой-либо связанный объект, при использовании метода <tt><em>association</em>.nil?</tt>:

<ruby>
if @supplier.account.nil?
  @msg = "No account found for this supplier"
end
</ruby>

h4(#has_one-when_are_objects_saved). Когда сохраняются объекты?

Когда вы назначаете объект связью +has_one+, этот объект автоматически сохраняется (для того, чтобы обновить его внешний ключ). Кроме того, любой заменяемый объект также автоматически сохраняется, поскольку его внешний ключ также изменяется.

Если одно из этих сохранений проваливается из-за ошибок валидации, тогда выражение назначения возвращает +false+, и само назначение отменяется.

Если родительский объект (который объявляет связь +has_one+) является несохраненным (то есть +new_record?+ возвращает +true+), тогда дочерние объекты не сохраняются. Они сохранятся автоматически, когда сохранится родительский объект.

Если вы хотите назначить объект связью +has_one+ без сохранения объекта, используйте метод <tt><em>association</em>.build</tt>.

h1. Экспорт схемы

<h4 id="what-are-schema-files-for">1. Для чего нужны файлы схемы?</h4>
<p>Миграции, какими бы не были они мощными, не являются авторитетным источником для Вашей схемы базы данных. Это роль достается или файлу <tt>db/schema.rb</tt>, или файлу <span class="caps">SQL</span>, которые генерирует Active Record при исследовании базы данных. Они разработаны не для редактирования, они всего лишь отражают текущее состояние базы данных.</p>
<p>Не нужно (это может привести к ошибке) развертывать новый экземпляр приложения, применяя всю историю миграций. Намного проще и быстрее загрузить в базу данных описание текущей схемы.</p>
<p>Например, как создается тестовая база данных: текущая рабочая база данных выгружается (или в <tt>db/schema.rb</tt>, или в <tt>db/development.sql</tt>), а затем загружается в тестовую базу данных.</p>
<p>Файлы схемы также полезны, если Вы хотите быстро глянуть, какие атрибуты есть у объекта Active Record. Эта информация не содержится в коде модели и часто размазана по нескольким миграциям, но собрана воедино в файле схемы. Плагин <a href="http://agilewebdevelopment.com/plugins/annotate_models">annotate_models</a>, который автоматически добавляет (и обновляет) комментарии в начале каждой из моделей, составляющих схему, может также вызвать интерес.</p>

<h4 id="types-of-schema-dumps">2. Типы выгрузок схемы</h4>
<p>Есть два способа выгрузить схему. Они устанавливаются в <tt>config/environment.rb</tt> в свойстве <tt>config.active_record.schema_format</tt>, которое может быть или <tt>:sql</tt>, или <tt>:ruby</tt>.</p>
<p>Если выбрано <tt>:ruby</tt>, тогда схема храниться в <tt>db/schema.rb</tt>. Посмотрев в этот файл, можно увидеть, что он очень похож на одну большую миграцию:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
ActiveRecord::Schema.define(:version =&gt; 20080906171750) do
  create_table &quot;authors&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;products&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;
    t.text     &quot;description&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
    t.string   &quot;part_number&quot;
  end
end
</pre></div>
<p>Во многих случаях этого достаточно. Этот файл создается с помощью проверки базы данных и описывает свою структуру, используя <tt>create_table</tt>, <tt>add_index</tt> и так далее. Так как он не зависит от типа базы данных, он может быть загружен в любую базу данных, поддерживаемую Active Record. Это очень полезно, если Вы распространяете приложение, которое может быть запущено на разных базах данных.</p>
<p>Однако, тут есть компромисс: <tt>db/schema.rb</tt> не может описать специфичные элементы базы данных, такие как внешний ключ (как ограничитель ссылочной целостности), триггеры или хранимые процедуры. В то время как в миграции Вы можете выполнить произвольное выражение <span class="caps">SQL</span>, выгрузчик схемы не может воспроизвести эти выражения из базы данных. Если Вы используете подобные функции, нужно установить формат схемы <tt>:sql</tt>.</p>
<p>Вместо использования выгрузчика схемы Active Records, структура базы данных будет выгружена с помощью инструмента, предназначенного для этой базы данных (с помощью задачи <tt>db:structure:dump</tt> Rake) в <tt>db/#{Rails.env}_structure.sql</tt>. Например, PostgreSQL использует утилиту <tt>pg_dump</tt>, а для MySQL этот файл будет содержать результат <tt>SHOW CREATE TABLE</tt> для разных таблиц. Загрузка такой схемы это просто запуск выражений <span class="caps">SQL</span>, содержащихся внутри.</p>
<p>По определению это будет абсолютной копией структуры базы данных, но это обычно мешает загрузить схему в базу данных другого типа, чем та, из которой схему создавали.</p>

<h4 id="schema-dumps-and-source-control">3. Выгрузки схем и контроль исходного кода</h4>
<p>Поскольку выгрузки схем это авторитетный источник для Вышей схемы базы данных, очень рекомендовано включать их в контроль исходного кода.</p>
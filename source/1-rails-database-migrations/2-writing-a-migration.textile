h1. Написание миграции

Как только вы создали свою миграцию, используя один из генераторов, пришло время поработать!

h4. Создание таблицы

Метод +create_table+ миграции будет одной из ваших рабочих лошадок. Обычное использование такое

<ruby>
create_table :products do |t|
  t.string :name
end
</ruby>

Это создаст таблицу +products+ со столбцом +name+ (и, как обсуждалось выше, подразумеваемым столбцом +id+).

Объект, переданный в блок, позволяет вам создавать столбцы в таблице. Есть два способа сделать это: первая (традиционная) форма выглядит так

<ruby>
create_table :products do |t|
  t.column :name, :string, :null => false
end
</ruby>

Вторая форма, так называемая "секси" миграция, опускает несколько избыточный метод +column+. Вместо этого, методы +string+, +integer+, и т.д. создают столбцы этого типа. Дополнительные параметры те же самые.

<ruby>
create_table :products do |t|
  t.string :name, :null => false
end
</ruby>

По умолчанию +create_table+ создаст первичный ключ, названный +id+. Вы можете изменить имя первичного ключа с помощью свойства +:primary_key+ (не забудьте также обновить соответствующую модель), или, если вы вообще не хотите первичный ключ (например, соединительная таблица для связи _многие ко многим_), можно указать +:id => false+. Если нужно передать базе данных специфичные свойства, вы можете поместить фрагмент +SQL+ в свойство +:options+. Например,

<ruby>
create_table :products, :options => "ENGINE=BLACKHOLE" do |t|
  t.string :name, :null => false
end
</ruby>

добавит +ENGINE=BLACKHOLE+ к выражению SQL, используемому для создания таблицы (при использовании MySQL по умолчанию передается +ENGINE=InnoDB+).

h4. Изменение таблиц

Близкий родственник +create_table+ это +change_table+, используемый для изменения существующих таблиц. Он используется подобно +create_table+, но у объекта, передаваемого в блок, больше методов. Например

<ruby>
change_table :products do |t|
  t.remove :description, :name
  t.string :part_number
  t.index :part_number
  t.rename :upccode, :upc_code
end
</ruby>

удаляет столбцы +description+ и +name+, создает столбец +part_number+ и добавляет индекс на него. Наконец, он переименовывает столбец +upccode+. Это то же самое, что и такой код

<ruby>
remove_column :products, :description
remove_column :products, :name
add_column :products, :part_number, :string
add_index :products, :part_number
rename_column :products, :upccode, :upc_code
</ruby>

Вам не нужно повторять имя таблицы, если сгруппировать все выражения, относящиеся к модификации одной конкретной таблицы. Индивидуальные имена методов изменения становятся также короче, например, +remove_column+ становится +remove+, и +add_index+ становится просто +index+.

h4. Специальные хелперы

Active Record предоставляет некоторые ярлыки для обычной функциональности. Вот, например, обычно добавляются два столбца +created_at+ и +updated_at+, поэтому есть метод, который делает непосредственно это:

<ruby>
create_table :products do |t|
  t.timestamps
end
</ruby>

создает новую таблицу products с этими двумя столбцами (плюс столбец +id+), в то время как

<ruby>
change_table :products do |t|
  t.timestamps
end
</ruby>

добавляет эти столбцы в существующую таблицу.

Другой хелпер называется +references+ (также доступен как +belongs_to+). В простой форме он только добавляет немного читаемости кода

<ruby>
create_table :products do |t|
  t.references :category
end
</ruby>

создаст столбец +category_id+ подходящего типа. Отметьте, что вы указали имя модели, а не имя столбца. Active Record добавил +_id+ за вас. Если у вас есть полиморфные связи +belongs_to+, то +references+ создаст оба требуемых столбца:

<ruby>
create_table :products do |t|
  t.references :attachment, :polymorphic => {:default => 'Photo'}
end
</ruby>

добавит столбец +attachment_id+ и строковый столбец +attachment_type+ со значением по умолчанию "Photo".

NOTE. Хелпер +references+ фактически не создает для вас внешний ключ как ограничение ссылочной целостности. Для этого нужно использовать +execute+ или плагин, который предоставляет "поддержку внешних ключей":/rails-database-migrations/active-record-and-referential-integrity.

Если вам недостаточно хелперов, предоставленных Active Record, можете использовать функцию +execute+ для запуска произвольного SQL.

Больше подробностей и примеров отдельных методов содержится в документации по API, в частности, документация для "<tt>ActiveRecord::ConnectionAdapters::SchemaStatements</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html (который обеспечивает методы, доступные в методах +up+ и +down+), "<tt>ActiveRecord::ConnectionAdapters::TableDefinition</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html (который обеспечивает методы, доступные у объекта, переданного методом +create_table+) и "<tt>ActiveRecord::ConnectionAdapters::Table</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html (который обеспечивает методы, доступные у объекта, переданного методом +change_table+).

h4. Пишем свой метод +change+

Метод +change+ устраняет необходимость писать оба метода +up+ и +down+ в тех случаях, когда Rails знает, как обратить изменения автоматически. На текущий момент метод +change+ поддерживает только эти определения миграции:

* +add_column+
* +add_index+
* +add_timestamps+
* +create_table+
* +remove_timestamps+
* +rename_column+
* +rename_index+
* +rename_table+

Если собираетесь использовать иные методы, следует писать методы +up+ и +down+.

h4. Пишем свой метод +down+

Метод +down+ вашей миграции должен вернуть назад изменения, выполненные методом +up+. Другими словами, схема базы данных не должна измениться, если вы выполните +up+, а затем +down+. Например, если вы создали таблицу в методе +up+, то должны ее удалить в методе +down+. Благоразумно выполнять действия в обратном порядке методу +up+. Например,

<ruby>
class ExampleMigration < ActiveRecord::Migration

  def up
    create_table :products do |t|
      t.references :category
    end
    #добавляем внешний ключ
    execute <<-SQL
      ALTER TABLE products
        ADD CONSTRAINT fk_products_categories
        FOREIGN KEY (category_id)
        REFERENCES categories(id)
    SQL

    add_column :users, :home_page_url, :string

    rename_column :users, :email, :email_address
  end

  def down
    rename_column :users, :email_address, :email
    remove_column :users, :home_page_url
    execute "ALTER TABLE products DROP FOREIGN KEY fk_products_categories"
    drop_table :products
  end
end
</ruby>

Иногда ваша миграция делает то, что невозможно отменить, например, уничтожает какую-либо информацию. В таких случаях, когда вы не сможете отменить миграцию, можете вызвать +IrreversibleMigration+ из вашего метода +down+. Если кто-либо попытается отменить вашу миграцию, будет отображена ошибка, что это не может быть выполнено.

h1. Hello, Rails!

Одним из традиционных мест начала изучения нового языка является быстрый вывод на экран какого-либо текста, чтобы это сделать, нужен запущенный сервер вашего приложения на Rails.

h4. Запуск веб-сервера

Фактически у вас уже есть функциональное приложение на Rails. Чтобы убедиться, нужно запустить веб-сервер на вашей машине. Это можно осуществить, запустив:

<shell>
$ rails server
</shell>

TIP: Компилирование CoffeeScript в JavaScript требует JavaScript runtime, и его отсутствие приведет к ошибке +execjs+. Обычно Mac OS X и Windows поставляются с установленным JavaScript runtime. +therubyracer+ and +therubyrhino+ -- обыкновенно используемые runtime для Ruby и JRuby соответственно. Также можно посмотреть список runtime-ов в "ExecJS":https://github.com/sstephenson/execjs.

По умолчанию это запустит экземпляр веб-сервера WEBrick (Rails может использовать и некоторые другие веб-серверы). Чтобы увидеть приложение в действии, откройте окно браузера и пройдите по адресу "http://localhost:3000":http://localhost:3000. Вы должны увидеть дефолтную информационную страницу Rails:

!/assets/guides/rails_welcome30.png(скриншот Welcome Aboard)!

TIP: Чтобы остановить веб-сервер, нажмите Ctrl+C в терминале, где он запущен. В режиме development, Rails в основном не требует остановки сервера; все изменения, которые Вы делаете в файлах, автоматически подхватываются сервером.

Страница "Welcome Aboard" это своеобразный тест для нового приложения на Rails: она показывает, что ваши программы настроены достаточно правильно для отображения страницы. Также можете нажать по ссылке _About your application’s environment_ чтобы увидеть сводку о среде вашего приложения.

h4. Скажите "привет", Рельсы

Чтобы Rails сказал "Привет", нужно создать, как минимум, контроллер и вьюху. К счастью, это можно сделать одной командой. Введите эту команду в вашем терминале:

<shell>
$ rails generate controller home index
</shell>

TIP: Если появляется ошибка, что команда не найдена, необходимо явно передать команду Rails +rails+ в Ruby: <tt>ruby \path\to\rails generate controller home index</tt>.

Rails создаст несколько файлов, включая +app/views/home/index.html.erb+. Это шаблон, который используется для отображения результатов экшна (метода) +index+ контроллера +home+. Откройте этот файл в текстовом редакторе и отредактируйте его, чтобы он содержал одну строчку кода:

<code class="html">
<h1>Hello, Rails!</h1>
</code>

h4. Настройка домашней страницы приложения

Теперь, когда мы сделали контроллер и вьюху, нужно сказать Rails, что мы хотим увидеть "Hello Rails!". В нашем случае мы хотим это увидеть, когда зайдем в корневой URL нашего сайта, "http://localhost:3000":http://localhost:3000, вместо тестовой "Welcome Aboard".

Первым шагом осуществления этого является удаление дефолтной страницы из вашего приложения:

<shell>
$ rm public/index.html
</shell>

Это нужно сделать, так как Rails предпочитает доставлять любой статичный файл из директории +public+ любому динамическому содержимому, создаваемому из контроллеров.

Теперь нужно сказать Rails, где находится настоящая домашняя страница. Откройте файл +config/routes.rb+ в редакторе. Это _маршрутный файл_ вашего приложения, который содержит варианты входа на сайт на специальном языке DSL (domain-specific language, предметно-ориентированный язык программирования), который говорит Rails, как соединять входящие запросы с контроллерами и экшнами. Этот файл содержит много закомментированных строк с примерами, и один из них фактически показывает, как соединить корень сайта с определенным контроллером и экшном. Найдите строку, начинающуюся с +root :to+ и раскоментируйте ее. Должно получится следующее:

<ruby>
Blog::Application.routes.draw do

  #...
  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  root :to => "home#index"
</ruby>

<tt>root :to => "home#index"</tt> говорит Rails направить обращение к корню в экшн index контроллера home.

Теперь, если вы пройдете по адресу "http://localhost:3000":http://localhost:3000 в браузере, то увидите +Hello, Rails!+.

NOTE. Чтобы узнать больше о роутинге, обратитесь к руководству "Роутинг в Rails":/rails-routing.

h1. Создание нового проекта Rails

<p>Если вы последуете этому руководству, то создадите проект Rails с названием <tt>blog</tt>, очень простой веб-блог. Прежде чем начнем создавать приложение, нужно убедиться, что сам Rails установлен.</p>
<div class='info'><p>Нижеследующие примеры используют # и $ для обозначения строки ввода терминала. Если вы используете Windows, ваша строка будет выглядеть наподобие c:\source_code></p></div>

<h4 id="installing-rails">1. Установка Rails</h4>
<p>В основном, самый простой способ установить Rails это воспользоваться возможностями RubyGems:</p>
<p>Просто запустите это как пользователь root:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
$ gem install rails
</pre></div>
<div class='info'><p>Если вы работаете в Windows, тогда можно быстро установить Ruby и Rails, используя <a href="http://railsinstaller.org/">Rails Installer</a>.</p></div>

<h4 id="creating-the-blog-application">2. Создание приложения Blog</h4>
<p>Лучший способ использования этого руководства - проходить каждый шаг и смотреть, что получится, пропустите код или шаг и учебное приложение не заработает, поэтому следует буквально все делать шаг за шагом. Если нужен законченный код, можете загрузить его из <a href="http://github.com/mikel/getting-started-code">Getting Started Code</a>.</p>
<p>Чтобы начать, откройте терминал, войдите в папку, в которой у вас есть права на создание файлов и напишите:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
$ rails new blog
</pre></div>
<p>Это создаст приложение на Rails с именем Blog в директории blog.</p>
<div class='info'><p>Можно посмотреть все возможные ключи, которые принимает билдер приложения на Rails, запустив <tt>rails new -h</tt>.</p></div>
<p>После того, как Вы создали приложение blog, перейдите в его папку, чтобы продолжить работу непосредственно с этим приложением:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
$ cd blog
</pre></div>
<p>В любом случае, Rails создаст папку в Вашей рабочей директории, названную <tt>blog</tt>. Откройте эту папку и посмотрите ее содержимое. Большая часть работы в этом самоучителе будет происходить в папке <tt>app/</tt>, но сейчас пробежимся по функциям каждой папки, которые создает Rails в новом приложении по умолчанию:</p>
<table class="inner_table">
	<tr>
		<th>Файл/Папка</th>
		<th>Цель</th>
	</tr>
	<tr>
		<td>Gemfile</td>
		<td>Этот файл позволяет определить, какие нужны зависимости от гемов для вашего приложения на Rails. Смотрите раздел про Bundler далее</td>
	</tr>
	<tr>
		<td><span class="caps">README</span></td>
		<td>Это вводный мануал для вашего приложения. Его следует отредактировать, чтобы рассказать остальным, что ваше приложение делает, как его настроить, и т.п.</td>
	</tr>
	<tr>
		<td>Rakefile</td>
		<td>Этот файл содержит набор команд, которые могут быть запущены в командной строке. Определения команд производятся во всех компонентах Rails. Вместо изменения Rakefile, вы можете добавить свои собственные задачи, добавив файлы в директорию lib/tasks вашего приложения.</td>
	</tr>
	<tr>
		<td>app/</td>
		<td>Содержит контроллеры, модели и вьюхи вашего приложения. Мы рассмотрим эту папку подробнее далее.</td>
	</tr>
	<tr>
		<td>config/</td>
		<td>Конфигурации правил, маршрутов, базы данных вашего приложения, и т.д.</td>
	</tr>
	<tr>
		<td>config.ru</td>
		<td>Конфигурация Rack для серверов, основанных на Rack, используемых для запуска приложения.</td>
	</tr>
	<tr>
		<td>db/</td>
		<td>Показывает текущую схему вашей базы данных, а также миграции базы данных. Мы скоро изучим миграции.</td>
	</tr>
	<tr>
		<td>doc/</td>
		<td>Углубленная информация по вашему приложению.</td>
	</tr>
	<tr>
		<td>lib/</td>
		<td>Внешние модули для вашего приложения (в этом руководстве мы их рассматривать не будем).</td>
	</tr>
	<tr>
		<td>log/</td>
		<td>Файлы логов приложения.</td>
	</tr>
	<tr>
		<td>public/</td>
		<td>Единственная папка, которая доступна извне как есть. Содержит статичные файлы и скомпилированные ресурсы.</td>
	</tr>
	<tr>
		<td>script/</td>
		<td>Содержит скрипт rails, который запускает ваше приложение, и может содержать другие скрипты, используемые для развертывания или запуска вашего приложения.</td>
	</tr>
	<tr>
		<td>test/</td>
		<td>Юнит-тесты, фикстуры и прочий аппарат тестирования. Это раскрывается в руководстве <a href="/a-guide-to-testing-rails-applications">Тестирование приложений на Rails</a>.</td>
	</tr>
	<tr>
		<td>tmp/</td>
		<td>Временные файлы</td>
	</tr>
	<tr>
		<td>vendor/</td>
		<td>Место для кода внешних разработчиков. В типичном приложении на Rails, включает Ruby Gems, исходный код Rails (если вы установили его в свой проект) и плагины, содержащие дополнительную упакованную функциональность.</td>
	</tr>
</table>

<h4 id="configuring-a-database">3.Конфигурирование базы данных</h4>
<p>Почти каждое приложение на Rails взаимодействует с базой данных. Какую базу данных использовать, определяется в конфигурационном файле <tt>config/database.yml</tt>. Если вы откроете этот файл в новом приложении на Rails, то увидите конфигурацию базы данных по умолчанию с использованием SQLite3. По умолчанию, файл содержит разделы для трех различных сред, в которых может быть запущен Rails:</p>
<ul>
	<li>Среда <tt>development</tt> используется на вашем компьютере разработчика для того, чтобы вы могли взаимодействовать с приложением.</li>
	<li>Среда <tt>test</tt> используется для запуска автоматических тестов.</li>
	<li>Среда <tt>production</tt> используется, когда вы развертываете свое приложения во всемирной сети для использования.</li>
</ul>

<h5 id="configuring-a-sqlite-database">3.1 Конфигурирование базы данных SQLite3</h5>
<p>В Rails есть встроенная поддержка <a href="http://www.sqlite.org">SQLite3</a>, являющейся легким несерверным приложением по управлению базами данных. Хотя нагруженная среда production может перегрузить SQLite, она хорошо работает для разработки и тестирования. Rails при создании нового проекта использует базу данных SQLite, но Вы всегда можете изменить это позже.</p>
<p>Вот раздел дефолтного конфигурационного файла (<tt>config/database.yml</tt>) с информацией о соединении для среды development:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000
</pre></div>
<div class='note'><p>В этом руководстве мы используем базу данных SQLite3 для хранения данных, поскольку эта база данных работает с нулевыми настройками. Rails также поддерживает MySQL и PostgreSQL &#8220;в коробочном варианте&#8221;, и имеет плагины для многих СУБД. Если Вы уже используете базу данных в работе, в Rails скорее всего есть адаптер для нее.</p></div>

<h5 id="configuring-a-mysql-database">3.2 Конфигурирование базы данных MySQL</h5>
<p>Если Вы выбрали MySQL вместо SQLite3, Ваш <tt>config/database.yml</tt> будет выглядеть немного по другому. Вот секция development:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
development:
  adapter: mysql2
  encoding: utf8
  database: blog_development
  pool: 5
  username: root
  password:
  socket: /tmp/mysql.sock
</pre></div>
<p>Если на вашем компьютере установленная MySQL имеет пользователя root с пустым паролем, эта конфигурация у Вас заработает. В противном случае измените username и password в разделе <tt>development</tt> как следует.</p>

<h5 id="configuring-a-postgresql-database">3.3 Конфигурирование базы данных PostgreSQL</h5>
<p>Если Вы выбрали PostgreSQL, Ваш <tt>config/database.yml</tt> будет модифицирован для использования базы данных PostgreSQL:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
development:
  adapter: postgresql
  encoding: unicode
  database: blog_development
  pool: 5
  username: blog
  password:
</pre></div>

<h5 id="configuring-a-sqlite-database-for-jruby-platform">3.4 Конфигурирование базы данных SQLite3 для платформы JRuby</h5>
<p>Если вы выбрали SQLite3 и используете JRuby, ваш <tt>config/database.yml</tt> будет выглядеть немного по-другому. Вот секция development:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
development:
  adapter: jdbcsqlite3
  database: db/development.sqlite3
</pre></div>

<h5 id="configuring-a-mysql-database-for-jruby-platform">3.5 Конфигурирование базы данных MySQL для платформы JRuby</h5>
<p>Если вы выбрали MySQL и используете JRuby, ваш <tt>config/database.yml</tt> будет выглядеть немного по-другому. Вот секция development:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
development:
  adapter: jdbcmysql
  database: blog_development
  username: root
  password:
</pre></div>

<h5 id="configuring-a-postgresql-database-for-jruby-platform">3.6 Конфигурирование базы данных PostgreSQL для платформы JRuby</h5>
<p>Наконец, если вы выбрали PostgreSQL и используете JRuby, ваш <tt>config/database.yml</tt> будет выглядеть немного по-другому. Вот секция development:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
development:
  adapter: jdbcpostgresql
  encoding: unicode
  database: blog_development
  username: blog
  password:
</pre></div>
<p>Измените username и password в секции <tt>development</tt> как следует.</p>
<div class='note'><p>Вам не нужно обновлять конфигурации баз данных вручную. Если взглянете на опции генератора приложения, то увидите, что одна из опций называется <tt>-database</tt>. Эта опция позволяет выбрать адаптер из списка наиболее часто используемых СУРБД. Вы даже можете запускать генератор неоднократно: <tt>cd .. && rails new blog —database=mysql</tt>. После того, как подтвердите перезапись <tt>config/database.yml</tt>, ваше приложение станет использовать MySQL вместо SQLite.</p></div>

<h4 id="creating-the-database">4. Создание базы данных</h4>
<p>Теперь, когда вы конфигурировали свою базу данных, пришло время позволить Rails создать для вас пустую базу данных. Это можно сделать, запустив команду rake:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
$ rake db:create
</pre></div>
<p>Это создаст базы данных SQLite3 development и test в папке <tt>db/</tt>.</p>
<div class='note'><p>Rake это одна из основных консольных команд, которую Rails использует для многих вещей. Можно посмотреть список доступных команд rake в своем приложении, запустив <tt>rake -T</tt>.</p></div>
h1. Создание нового проекта Rails

Лучший способ использования этого руководства - проходить каждый шаг и смотреть, что получится, пропустите код или шаг и учебное приложение не заработает, поэтому следует буквально все делать шаг за шагом. Можно получить законченный код "здесь":https://github.com/lifo/docrails/tree/master/railties/guides/code/getting_started.

Следуя этому руководству, вы создадите проект Rails с названием <tt>blog</tt>, очень простой веб-блог. Прежде чем начнем создавать приложение, нужно убедиться, что сам Rails установлен.

TIP: Нижеследующие примеры используют # и $ для обозначения строки ввода терминала. Если вы используете Windows, ваша строка будет выглядеть наподобие c:\source_code>

Чтобы проверить, что все установленно верно, должно запускаться следующее:

<shell>
$ rails --version
</shell>

Если выводится что-то вроде "Rails 3.1.3", можно продолжать.

h4. Установка Rails

В основном, самый простой способ установить Rails это воспользоваться возможностями RubyGems:

<shell>
Просто запустите это как пользователь root:
# gem install rails
</shell>

TIP: Если вы работаете в Windows, тогда можно быстро установить Ruby и Rails, используя "Rails Installer":http://railsinstaller.org.

h4. Создание приложения Blog

Чтобы начать, откройте терминал, войдите в папку, в которой у вас есть права на создание файлов и напишите:

<shell>
$ rails new blog
</shell>

Это создаст приложение на Rails с именем Blog в директории blog.

TIP: Можно посмотреть все возможные ключи, которые принимает билдер приложения на Rails, запустив <tt>rails new -h</tt>.

После того, как вы создали приложение blog, перейдите в его папку, чтобы продолжить работу непосредственно с этим приложением:

<shell>
$ cd blog
</shell>

Команда 'rails new blog', запущенная ранее, создаст папку в вашей рабочей директории, названную <tt>blog</tt>. В папке <tt>blog</tt> имеется несколько автоматически созданных папок, задающих структуру приложения на Rails. Большая часть работы в этом самоучителе будет происходить в папке <tt>app/</tt>, но сейчас пробежимся по функциям каждой папки, которые создает Rails в новом приложении по умолчанию:

|_.Файл/Папка|_.Цель|
|app/|Содержит контроллеры, модели и вьюхи вашего приложения. Мы рассмотрим эту папку подробнее далее.|
|config/|Конфигурации правил, маршрутов, базы данных вашего приложения, и т.д. Более подробно это раскрыто в "Конфигурирование приложений на Rails":/configuring-rails-applications|
|config.ru|Конфигурация Rack для серверов, основанных на Rack, используемых для запуска приложения.|
|db/|Содержит текущую схему вашей базы данных, а также миграции базы данных.|
|doc/|Углубленная информация по вашему приложению.|
|Gemfile<BR />Gemfile.lock|Эти файлы позволяет определить, какие нужны зависимости от гемов для вашего приложения на Rails.|
|lib/|Внешние модули для вашего приложения.|
|log/|Файлы логов приложения.|
|public/|Единственная папка, которая доступна извне как есть. Содержит статичные файлы и скомпилированные ресурсы.|
|Rakefile|Этот файл содержит набор команд, которые могут быть запущены в командной строке. Определения команд производятся во всех компонентах Rails. Вместо изменения Rakefile, вы можете добавить свои собственные задачи, добавив файлы в директорию lib/tasks вашего приложения.|
|README.rdoc|Это вводный мануал для вашего приложения. Его следует отредактировать, чтобы рассказать остальным, что ваше приложение делает, как его настроить, и т.п.|
|script/|Содержит скрипт rails, который запускает ваше приложение, и может содержать другие скрипты, используемые для развертывания или запуска вашего приложения.|
|test/|Юнит-тесты, фикстуры и прочий аппарат тестирования. Это раскрывается в руководстве "Тестирование приложений на Rails":/a-guide-to-testing-rails-applications|
|tmp/|Временные файлы|
|vendor/|Место для кода внешних разработчиков. В типичном приложении на Rails, включает Ruby Gems, исходный код Rails (если вы опционально установили его в свой проект) и плагины, содержащие дополнительную упакованную функциональность.|

h4. Конфигурирование базы данных

Почти каждое приложение на Rails взаимодействует с базой данных. Какую базу данных использовать, определяется в конфигурационном файле <tt>config/database.yml</tt>. Если вы откроете этот файл в новом приложении на Rails, то увидите базу данных по умолчанию, настроенную на использование SQLite3. По умолчанию, файл содержит разделы для трех различных сред, в которых может быть запущен Rails:

* Среда <tt>development</tt> используется на вашем рабочем/локальном компьютере для того, чтобы вы могли взаимодействовать с приложением.
* Среда <tt>test</tt> используется при запуске автоматических тестов.
* Среда <tt>production</tt> используется, когда вы развертываете свое приложения во всемирной сети для использования.

TIP: Вам не нужно обновлять конфигурации баз данных вручную. Если взглянете на опции генератора приложения, то увидите, что одна из опций называется <tt>-database</tt>. Эта опция позволяет выбрать адаптер из списка наиболее часто используемых СУРБД. Вы даже можете запускать генератор неоднократно: <tt>cd .. && rails new blog —database=mysql</tt>. После того, как подтвердите перезапись <tt>config/database.yml</tt>, ваше приложение станет использовать MySQL вместо SQLite. Подробные примеры распространенных соединений с базой данных указаны ниже.

h5. Конфигурирование базы данных SQLite3

В Rails есть встроенная поддержка "SQLite3":http://www.sqlite.org, являющейся легким несерверным приложением по управлению базами данных. Хотя нагруженная среда production может перегрузить SQLite, она хорошо работает для разработки и тестирования. Rails при создании нового проекта использует базу данных SQLite, но Вы всегда можете изменить это позже.

Вот раздел дефолтного конфигурационного файла (<tt>config/database.yml</tt>) с информацией о соединении для среды development:

<yaml>
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000
</yaml>

NOTE: В этом руководстве мы используем базу данных SQLite3 для хранения данных, поскольку эта база данных работает с нулевыми настройками. Rails также поддерживает MySQL и PostgreSQL "из коробки", и имеет плагины для многих СУБД. Если Вы уже используете базу данных в работе, в Rails скорее всего есть адаптер для нее.

h5. Конфигурирование базы данных MySQL

Если Вы выбрали MySQL вместо SQLite3, Ваш <tt>config/database.yml</tt> будет выглядеть немного по другому. Вот секция development:

<yaml>
development:
  adapter: mysql2
  encoding: utf8
  database: blog_development
  pool: 5
  username: root
  password:
  socket: /tmp/mysql.sock
</yaml>

Если на вашем компьютере установленная MySQL имеет пользователя root с пустым паролем, эта конфигурация у Вас заработает. В противном случае измените username и password в разделе <tt>development</tt> как следует.

h5. Конфигурирование базы данных PostgreSQL

Если Вы выбрали PostgreSQL, Ваш <tt>config/database.yml</tt> будет модифицирован для использования базы данных PostgreSQL:

<yaml>
development:
  adapter: postgresql
  encoding: unicode
  database: blog_development
  pool: 5
  username: blog
  password:
</yaml>

h5. Конфигурирование базы данных SQLite3 для платформы JRuby

Если вы выбрали SQLite3 и используете JRuby, ваш <tt>config/database.yml</tt> будет выглядеть немного по-другому. Вот секция development:

<yaml>
development:
  adapter: jdbcsqlite3
  database: db/development.sqlite3
</yaml>

h5. Конфигурирование базы данных MySQL для платформы JRuby

Если вы выбрали MySQL и используете JRuby, ваш <tt>config/database.yml</tt> будет выглядеть немного по-другому. Вот секция development:

<yaml>
development:
  adapter: jdbcmysql
  database: blog_development
  username: root
  password:
</yaml>

h5. Конфигурирование базы данных PostgreSQL для платформы JRuby

Наконец, если вы выбрали PostgreSQL и используете JRuby, ваш <tt>config/database.yml</tt> будет выглядеть немного по-другому. Вот секция development:

<yaml>
development:
  adapter: jdbcpostgresql
  encoding: unicode
  database: blog_development
  username: blog
  password:
</yaml>

Измените username и password в секции <tt>development</tt> как следует.

h4. Создание базы данных

Теперь, когда вы конфигурировали свою базу данных, пришло время позволить Rails создать для вас пустую базу данных. Это можно сделать, запустив команду rake:

<shell>
$ rake db:create
</shell>

Это создаст базы данных SQLite3 development и test в папке <tt>db/</tt>.
TIP: Rake это одна из основных консольных команд, которую Rails использует для многих вещей. Можно посмотреть список доступных команд rake в своем приложении, запустив +rake -T+.

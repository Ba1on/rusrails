h1. Создаем мульти-модельную форму

Другой особенностью обычного блога является возможность метки (тэгирования) публикаций. Чтобы применить эту особенность, вашему приложению нужно взаимодействовать более чем с одной моделью в одной форме. Rails предлагает поддержку вложенных форм.

Чтобы это продемонстрировать, добавим поддержку для присвоения каждой публикации множественных тегов непосредственно в форме, где вы создаете публикации. Сначала создадим новую модель для хранения тегов:

<shell>
$ rails generate model tag name:string post:references
</shell>

Снова запустим миграцию для создания таблицы в базе данных:

<shell>
$ rake db:migrate
</shell>

Далее отредактируем файл +post.rb+, создав другую сторону связи, и сообщим Rails (с помощью макроса +accepts_nested_attributes_for+), что намереваемся редактировать теги непосредственно в публикациях:

<ruby>
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }

  has_many :comments, :dependent => :destroy
  has_many :tags

  accepts_nested_attributes_for :tags, :allow_destroy => :true,
    :reject_if => proc { |attrs| attrs.all? { |k, v| v.blank? } }
end
</ruby>

Опция +:allow_destroy+ на объявлении вложенного атрибута говорит Rails отображать чекбокс "remove" во вьюхе, которую вы скоро создадите. Опция +:reject_if+ предотвращает сохранение новых тегов, не имеющих каких-либо заполненных аттрибутов.

Изменим +views/posts/_form.html.erb+, чтобы рендерить партиал, создающий теги:

<erb>
<% @post.tags.build %>
<%= form_for(@post) do |post_form| %>
  <% if @post.errors.any? %>
  <div id="errorExplanation">
    <h2><%= pluralize(@post.errors.count, "error") %> prohibited this post from being saved:</h2>
    <ul>
    <% @post.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
  <% end %>

  <div class="field">
    <%= post_form.label :name %><br />
    <%= post_form.text_field :name %>
  </div>
  <div class="field">
    <%= post_form.label :title %><br />
    <%= post_form.text_field :title %>
  </div>
  <div class="field">
    <%= post_form.label :content %><br />
    <%= post_form.text_area :content %>
  </div>
  <h2>Tags</h2>
  <%= render :partial => 'tags/form',
             :locals => {:form => post_form} %>
  <div class="actions">
    <%= post_form.submit %>
  </div>
<% end %>
</erb>

Отметьте, что мы изменили +f+ в +form_for(@post) do |f|+ на +post_form+, чтобы было проще понять, что происходит.

Этот пример показывает другую опцию хелпера render, способную передавать локальные переменные, в нашем случае мы хотим передать переменную +form+ в партиал, относящуюся к объекту +post_form+.

Мы также добавили +@post.tags.build+ вверху формы, это сделано для того, чтобы убедиться, что имеется новый тег, готовый к указанию его имени пользователем. Если не создаете новый тег, то форма не появится, так как не будет доступного для создания нового объекта Tag.

Теперь создайте папку +app/views/tags+ и создайте файл с именем +_form.html.erb+, содержащий форму для тега:

<erb>
<%= form.fields_for :tags do |tag_form| %>
  <div class="field">
    <%= tag_form.label :name, 'Tag:' %>
    <%= tag_form.text_field :name %>
  </div>
  <% unless tag_form.object.nil? || tag_form.object.new_record? %>
    <div class="field">
      <%= tag_form.label :_destroy, 'Remove:' %>
      <%= tag_form.check_box :_destroy %>
    </div>
  <% end %>
<% end %>
</erb>

Наконец, отредактируйте шаблон +app/views/posts/show.html.erb+, чтобы отображались наши теги.

<erb>
<p class="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<p>
  <b>Tags:</b>
  <%= @post.tags.map { |t| t.name }.join(", ") %>
</p>

<h2>Comments</h2>
<%= render @post.comments %>

<h2>Add a comment:</h2>
<%= render "comments/form" %>


<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

После этих изменений, вы сможете редактировать публикацию и ее теги в одной и той же вьюхе.

Однако, такой вызов метода +@post.tags.map { |t| t.name }.join(&quot;, &quot;)+ неуклюж, мы можем исправить это, создав метод хелпера.

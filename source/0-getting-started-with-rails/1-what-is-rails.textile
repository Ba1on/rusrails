h1. Что такое Rails?

<p>Rails &#8211; фреймворк для веб-разработки, написанный на языке программирования Ruby. Он разработан, чтобы сделать программирование веб-приложений проще, так как использует ряд допущений о том, что нужно каждому разработчику для создания нового проекта. Он позволяет вам писать меньше кода в процессе программирования, в сравнении с другими языками и фреймворками. Профессиональные разработчики на Rails также отмечают, что с ним разработка веб-приложений более забавна =)</p>
<p>Rails - своевольный программный продукт. Он делает предположение, что имеется &#8220;лучший&#8221; способ что-то сделать, и он так разработан, что стимулирует этот способ &#8211; а в некоторых случаях даже препятствует альтернативам. Если изучите &#8220;The Rails Way&#8221;, то, возможно, откроете в себе значительное увеличение производительности. Если будете упорствовать и переносить старые привычки с других языков в разработку на Rails, и попытаетесь использовать шаблоны, изученные где-то еще, Ваш опыт разработки будет менее счастливым.</p>
<p>Философия Rails включает несколько ведущих принципов:</p>
<ul>
	<li><span class="caps">DRY</span> &#8211; &#8220;Don’t Repeat Yourself&#8221; &#8211; означает, что написание одного и того же кода в разных местах &#8211; это плохо.</li>
	<li>Convention Over Configuration &#8211; означает, что Rails сам знает, что вы хотите и что собираетесь делать, вместо того, чтобы заставлять вас по мелочам править многочисленные конфигурационные файлы.</li>
	<li><span class="caps">REST</span> &#8211; лучший шаблон для веб-приложений &#8211; организация приложения вокруг ресурсов и стандартных методов HTTP это быстрый способ разработки.</li>
</ul>

<h4 id="the-mvc-architecture">1. Архитерктура <span class="caps">MVC</span>.</h4>
<p>Rails организован на архитектуре Model, View, Controller, обычно называемой <span class="caps">MVC</span>. Преимущества <span class="caps">MVC</span> следующие:</p>
<ul>
	<li>Отделяется бизнес-логика от пользовательского интерфейса</li>
	<li>Легко хранить неповторяющийся код <span class="caps">DRY</span></li>
	<li>Легко обслуживать приложение, так как ясно, в каком месте содержится тот или иной код</li>
</ul>

<h5 id="models">1.1 Модели</h5>
<p>Модель представляет собой информацию (данные) приложения и правила для обработки этих данных. В случае с Rails, модели в основном используются для управления правилами взаимодействия с таблицей базы данных. В большинстве случаев, одна таблица в базе данных соответствует одной модели вашего приложения. Основная масса бизнес логики вашего приложения будет сконцентрирована в моделях.</p>

<h5 id="views">1.2 Представления</h5>
<p>Представления (на жаргоне &#8220;вьюхи&#8221;) представляют собой пользовательский интерфейс Вашего приложения. В Rails представления часто являются <span class="caps">HTML</span> файлами с встроенным кодом Ruby, который выполняет задачи, связанные исключительно с представлением данных. Представления справляются с задачей предоставления данных веб-браузеру или другому инструменту, который может использоваться для обращения к Вашему приложению.</p>

<h5 id="controllers">2.1.3 Контроллеры</h5>
<p>Контроллеры &#8220;склеивают&#8221; вместе модели и представления. В Rails контроллеры ответственны за обработку входящих запросов от веб-браузера,  запрос данных у моделей и передачу этих данных во вьюхи для отображения.</p>

<h4 id="the-components-of-rails">2 Компоненты Rails</h4>
<p>Rails строится на многих отдельных компонентах. Каждый из этих компонентов кратко описан ниже. Если вы новичок в Rails, не зацикливайтесь на подробностях каждого компонента, так как они будут детально описаны позже. Для примера, в руководстве мы создадим приложение Rack, но вам не нужно ничего знать, что это такое, чтобы продолжить изучение руководства.</p>
<ul>
	<li>Action Pack
	<ul>
		<li>Action Controller</li>
		<li>Action Dispatch</li>
		<li>Action View</li>
	</ul></li>
	<li>Action Mailer</li>
	<li>Active Model</li>
	<li>Active Record</li>
	<li>Active Resource</li>
	<li>Active Support</li>
	<li>Railties</li>
</ul>

<h5 id="action-pack">2.1 Action Pack</h5>
<p>Action Pack это отдельный гем, содержащий Action Controller, Action View и Action Dispatch.  Буквы &#8220;VC&#8221; в аббревиатуре &#8220;<span class="caps">MVC</span>&#8221;.</p>

<h6 id="action-controller">2.1.1 Action Controller</h6>
<p>Action Controller это компонент, который управляет контроллерами в приложении на Rails. Фреймворк Action Controller обрабатывает входящие запросы к приложению на Rails, извлекает параметры и направляет их в предназначенный экшн (action). Сервисы, предоставляемые Action Controller-ом включают управление сессиями, рендеринг шаблонов и управление перенаправлениями.</p>

<h6 id="action-view">2.1.2 Action View</h6>
<p>Action View управляет представлениями в вашем приложении на Rails. На выходе по умолчанию создается <span class="caps">HTML</span> или <span class="caps">XML</span>. Action View управляет рендерингом шаблонов, включая вложенные и частичные шаблоны, и содержит встроенную поддержку <span class="caps">AJAX</span>. Шаблоны вьюх более детально раскрываются в другом руководстве, <a href="/layouts-and-rendering-in-rails">Макеты и рендеринг в Rails</a></p>

<h6 id="action-dispatch">2.1.3 Action Dispatch</h6>
<p>Action Dispatch управляет маршрутизацией веб запросов и рассылкой их так, как вы желаете, или к вашему приложению, или к любому другому приложению Rack. Приложения Rack - это продвинутая тема, раскрыта в отдельном руководстве, <a href="http://edgeguides.rubyonrails.org/rails_on_rack.html">Rails on Rack</a></p>

<h5 id="action-mailer">2.2 Action Mailer</h5>
<p>Action Mailer это фреймворк для встроенных служб e-mail. Action Mailer можно использовать, чтобы получать и обрабатывать входящую электронную почту, или чтобы рассылать простой текст или или сложные multipart электронные письма, основанные на гибких шаблонах.</p>

<h5 id="active-model">2.3 Active Model</h5>
<p>Active Model предоставляет определенный интерфейс между службами гема Action Pack и гемами Object Relationship Mapping, такими как Active Record.  Active Model позволяет Rails использовать другие фреймворки <span class="caps">ORM</span> вместо Active Record, если так нужно вашему приложению.</p>

<h5 id="active-record">2.4 Active Record</h5>
<p>Active Record это основа для моделей в приложении на Rails. Он предоставляет независимость от базы данных, базовый <span class="caps">CRUD</span>-функционал, расширенные возможности поиска и способность устанавливать связи между моделями и модели с другим сервисом.</p>

<h5 id="active-resource">2.5 Active Resource</h5>
<p>Active Resource представляет фреймворк для управления соединением между бизнес-объектами и веб-сервисами на основе RESTful. Он реализует способ привязки веб-ресурсов к локальным объектам с семантикой <span class="caps">CRUD</span>.</p>

<h5 id="active-support">2.6 Active Support</h5>
<p>Active Support это большая коллекция полезных классов и расширений стандартных библиотек Ruby, которые могут быть использованы в Rails, как в ядре, так и в вашем приложении.</p>

<h5 id="railties">2.7 Railties</h5>
<p>Railties это код ядра Rails, который создает новые приложения на Rails и соединяет разные фреймворки и плагины вместе в любом приложении на Rails.</p>

<h4 id="rest">3. <span class="caps">REST</span></h4>
<p>Rest обозначает Representational State Transfer и основан на архитектуре RESTful. Как правило, считается, что она началась с докторских тезисов Roy Fielding, <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>. Хотя можно и почитать эти тезисы, <span class="caps">REST</span> в терминах Rails сводится к двум главным принципам в своих целях:</p>
<ul>
	<li>Использование идентификаторов ресурса, таких как URL, чтобы представлять ресурсы</li>
	<li>Передача представлений о состоянии этого ресурса между компонентами системы.</li>
</ul>
<p>Например, запрос HTTP:</p>
<div class="code_container">
<pre class="brush: plain; gutter: false; toolbar: false">
DELETE /photos/17
</pre>
</div>
<p>будет воспринят как ссылка на ресурс photo с идентификатором ID 17, и желаемым действием &#8211; удалить этот ресурс. <span class="caps">REST</span> это естественный стиль для архитектуры веб-приложений, и Rails ограждает Вас от некоторых сложностей RESTful и причуд браузера.</p>
<p>Если Вы хотите побольше узнать о <span class="caps">REST</span>, как о стиле архитектуры, эти англоязычные ресурсы более подходящие, чем тезисы Fielding:</p>
<ul>
	<li><a href="http://www.infoq.com/articles/rest-introduction">A Brief Introduction to <span class="caps">REST</span></a> by Stefan Tilkov</li>
	<li><a href="http://bitworking.org/news/373/An-Introduction-to-REST">An Introduction to <span class="caps">REST</span></a> (video tutorial) by Joe Gregorio</li>
	<li><a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">Representational State Transfer</a> article in Wikipedia</li>
	<li><a href="http://www.infoq.com/articles/webber-rest-workflow">How to <span class="caps">GET</span> a Cup of Coffee</a> by Jim Webber, Savas Parastatidis &amp; Ian Robinson</li>
</ul>
<p>На русском языке могу посоветовать только <a href="http://msdn.microsoft.com/ru-ru/magazine/dd315413.aspx">Введение в службы RESTful с использованием WCF</a> Джона Фландерса.</p>

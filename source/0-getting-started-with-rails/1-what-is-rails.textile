h1. Что такое Rails?

TIP: Этот раздел посвящен подробностям предпосылок и философии фреймворка Rails. Его можно спокойно пропустить и вернуться к нему позже. "Следующий раздел":/getting-started-with-rails/creating-a-new-rails-project направит вас на путь создания собственного первого приложения на Rails.

Rails - фреймворк для веб-разработки, написанный на языке программирования Ruby. Он разработан, чтобы сделать программирование веб-приложений проще, так как использует ряд допущений о том, что нужно каждому разработчику для создания нового проекта. Он позволяет вам писать меньше кода в процессе программирования, в сравнении с другими языками и фреймворками. Профессиональные разработчики на Rails также отмечают, что с ним разработка веб-приложений более забавна =)

Rails - своевольный программный продукт. Он делает предположение, что имеется "лучший" способ что-то сделать, и он так разработан, что стимулирует этот способ - а в некоторых случаях даже препятствует альтернативам. Если изучите "The Rails Way", то, возможно, откроете в себе значительное увеличение производительности. Если будете упорствовать и переносить старые привычки с других языков в разработку на Rails, и попытаетесь использовать шаблоны, изученные где-то еще, ваш опыт разработки будет менее счастливым.

Философия Rails включает несколько ведущих принципов:

* DRY - "Don’t Repeat Yourself" -  означает, что написание одного и того же кода в разных местах - это плохо.
* Convention Over Configuration - означает, что Rails сам знает, что вы хотите и что собираетесь делать, вместо того, чтобы заставлять вас по мелочам править многочисленные конфигурационные файлы.
* REST - лучший шаблон для веб-приложений - организация приложения вокруг ресурсов и стандартных методов HTTP это быстрый способ разработки.

h4. Архитектура MVC

Rails организован на архитектуре Model, View, Controller, обычно называемой MVC. Преимущества MVC следующие:

* Отделяется бизнес-логика от пользовательского интерфейса
* Легко хранить неповторяющийся код DRY
* Легко обслуживать приложение, так как ясно, в каком месте содержится тот или иной код

h5. Модели

Модель представляет собой информацию (данные) приложения и правила для обработки этих данных. В случае с Rails, модели в основном используются для управления правилами взаимодействия с таблицей базы данных. В большинстве случаев, одна таблица в базе данных соответствует одной модели вашего приложения. Основная масса бизнес логики вашего приложения будет сконцентрирована в моделях.

h5. Представления

Представления (на жаргоне "вьюхи") представляют собой пользовательский интерфейс Вашего приложения. В Rails представления часто являются HTML файлами с встроенным кодом Ruby, который выполняет задачи, связанные исключительно с представлением данных. Представления справляются с задачей предоставления данных веб-браузеру или другому инструменту, который может использоваться для обращения к Вашему приложению.

h5. Контроллеры

Контроллеры "склеивают" вместе модели и представления. В Rails контроллеры ответственны за обработку входящих запросов от веб-браузера,  запрос данных у моделей и передачу этих данных во вьюхи для отображения.

h4. Компоненты Rails

Rails строится на многих отдельных компонентах. Каждый из этих компонентов кратко описан ниже. Если вы новичок в Rails, не зацикливайтесь на подробностях каждого компонента, так как они будут детально описаны позже. Для примера, в руководстве мы создадим приложение Rack, но вам не нужно ничего знать, что это такое, чтобы продолжить изучение руководства.

* Action Pack
  ** Action Controller
  ** Action Dispatch
  ** Action View
* Action Mailer
* Active Model
* Active Record
* Active Resource
* Active Support
* Railties

h5. Action Pack

Action Pack это отдельный гем, содержащий Action Controller, Action View и Action Dispatch.  Буквы "VC" в аббревиатуре "MVC".

h6. Action Controller

Action Controller это компонент, который управляет контроллерами в приложении на Rails. Фреймворк Action Controller обрабатывает входящие запросы к приложению на Rails, извлекает параметры и направляет их в предназначенный экшн (action). Сервисы, предоставляемые Action Controller-ом включают управление сессиями, рендеринг шаблонов и управление перенаправлениями.

h6. Action View

Action View управляет представлениями в вашем приложении на Rails. На выходе по умолчанию создается HTML или XML. Action View управляет рендерингом шаблонов, включая вложенные и частичные шаблоны, и содержит встроенную поддержку <span class="caps">AJAX</span>. Шаблоны вьюх более детально раскрываются в другом руководстве, "Макеты и рендеринг в Rails":/layouts-and-rendering-in-rails

h6. Action Dispatch

Action Dispatch управляет маршрутизацией веб запросов и рассылкой их так, как вы желаете, или к вашему приложению, или к любому другому приложению Rack. Приложения Rack - это продвинутая тема, раскрыта в отдельном руководстве, "Rails on Rack":http://guides.rubyonrails.org/rails_on_rack.html

h5. Action Mailer

Action Mailer это фреймворк для встроенных служб e-mail. Action Mailer можно использовать, чтобы получать и обрабатывать входящую электронную почту, или чтобы рассылать простой текст или или сложные multipart электронные письма, основанные на гибких шаблонах.

h5. Active Model

Active Model предоставляет определенный интерфейс между службами гема Action Pack и гемами Object Relationship Mapping, такими как Active Record.  Active Model позволяет Rails использовать другие фреймворки ORM вместо Active Record, если так нужно вашему приложению.

h5. Active Record

Active Record это основа для моделей в приложении на Rails. Он предоставляет независимость от базы данных, базовый CRUD-функционал, расширенные возможности поиска и способность устанавливать связи между моделями и модели с другим сервисом.

h5. Active Resource

Active Resource представляет фреймворк для управления соединением между бизнес-объектами и веб-сервисами на основе RESTful. Он реализует способ привязки веб-ресурсов к локальным объектам с семантикой CRUD.

h5. Active Support

Active Support это большая коллекция полезных классов и расширений стандартных библиотек Ruby, которые могут быть использованы в Rails, как в ядре, так и в вашем приложении.

h5. Railties

Railties это код ядра Rails, который создает новые приложения на Rails и соединяет разные фреймворки и плагины вместе в любом приложении на Rails.

h4. REST

Rest обозначает Representational State Transfer и основан на архитектуре RESTful. Как правило, считается, что она началась с докторских тезисов Roy Fielding, "Architectural Styles and the Design of Network-based Software
Architectures":http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm. Хотя можно и почитать эти тезисы, REST в терминах Rails сводится к двум главным принципам в своих целях:

* Использование идентификаторов ресурса, таких как URL, чтобы представлять ресурсы
* Передача представлений о состоянии этого ресурса между компонентами системы.

Например, запрос HTTP:

<tt>DELETE /photos/17</tt>

будет воспринят как ссылка на ресурс photo с идентификатором ID 17, и желаемым действием - удалить этот ресурс. REST это естественный стиль для архитектуры веб-приложений, и Rails ограждает Вас от некоторых сложностей RESTful и причуд браузера.

Если Вы хотите побольше узнать о REST, как о стиле архитектуры, эти англоязычные ресурсы более подходящие, чем тезисы Fielding:

* "A Brief Introduction to REST":http://www.infoq.com/articles/rest-introduction by Stefan Tilkov
* "An Introduction to REST":http://bitworking.org/news/373/An-Introduction-to-REST (video tutorial) by Joe Gregorio
* "Representational State Transfer":http://en.wikipedia.org/wiki/Representational_State_Transfer article in Wikipedia
* "How to GET a Cup of Coffee":http://www.infoq.com/articles/webber-rest-workflow by Jim Webber, Savas Parastatidis &
Ian Robinson

На русском языке могу посоветовать только "Введение в службы RESTful с использованием WCF":http://msdn.microsoft.com/ru-ru/magazine/dd315413.aspx Джона Фландерса.

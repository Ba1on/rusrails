h1. Создание ресурса

h3. Разрабатываем быстро с помощью Scaffolding

"Строительные леса" Rails, _scaffolding_, это быстрый способ создания больших кусков кода приложения. Если хотите создать модели, вьюхи и контроллеры для нового ресурса одной операцией, воспользуйтесь scaffolding.

h3. Создание ресурса

В случае с приложением блога, можно начать с генерации скаффолда для ресурса Post: это будет представлять собой отдельную публикацию в блоге. Чтобы осуществить это, напишите команду в терминале:

<shell>
$ rails generate scaffold Post name:string title:string content:text
</shell>

Генератор скаффолда создаст несколько файлов в Вашем приложении в разных папках, и отредактирует <tt>config/routes.rb</tt>. Вот краткое описание того, что он создаст:

|_.Файл                                       |_.Цель|
|db/migrate/20100207214725_create_posts.rb    |Миграция для создания таблицы posts в вашей базе данных (у вашего файла будет другая временная метка)|
|app/models/post.rb                           |Модель Post|
|test/unit/post_test.rb                       |Каркас юнит-тестирования для модели posts|
|test/fixtures/posts.yml                      |Образцы публикаций для использования в тестировании|
|config/routes.rb                             |Отредактирован, чтобы включить маршрутную информацию для posts|
|app/controllers/posts_controller.rb          |Контроллер Posts|
|app/views/posts/index.html.erb               |Вьюха для отображения перечня всех публикаций |
|app/views/posts/edit.html.erb                |Вьюха для редактирования существующей публикации|
|app/views/posts/show.html.erb                |Вьюха для отображения отдельной публикации|
|app/views/posts/new.html.erb                 |Вьюха для создания новой публикации|
|app/views/posts/_form.html.erb               |Партиал, контролирующий внешний вид и поведение форм, используемых во вьюхах edit и new|
|test/functional/posts_controller_test.rb     |Каркас функционального тестирования для контроллера posts|
|app/helpers/posts_helper.rb                  |Функции хелпера, используемые из вьюх posts|
|test/unit/helpers/posts_helper_test.rb       |Каркас юнит-тестирования для хелпера posts|
|app/assets/javascripts/posts.js.coffee       |CoffeeScript для контроллера posts|
|app/assets/stylesheets/posts.css.scss        |Каскадная таблица стилей для контроллера posts|
|app/assets/stylesheets/scaffolds.css.scss    |Каскадная таблица стилей, чтобы вьюхи скаффолда смотрелись лучше|

NOTE: Хотя скаффолд позволяет быстро разрабатывать, стандартный код, который он генерирует, не всегда подходит для вашего приложения. Как правило, необходимо модифицировать сгенерированный код. Многие опытные разработчики на Rails избегают работы со скаффолдом, предпочитая писать весь или большую часть кода с нуля. Rails, однако, позволяет легко настраивать шаблоны для генерируемых моделей, контроллеров, вьюх и других источников файлов. Больше информации вы найдете в "Руководстве по созданию и настройке генераторов и шаблонов Rails":/todo.

h4. Запуск миграции

Одним из продуктов команды +rails generate scaffold+ является _миграция базы данных_. Миграции - это класс Ruby, разработанный для того, чтобы было просто создавать и модифицировать таблицы базы данных. Rails использует команды rake для запуска миграций, и возможна отмена миграции после того, как она была применена к вашей базе данных. Имя файла миграции включает временную метку, чтобы быть уверенным, что они выполняются в той последовательности, в которой они создавались.

Если Вы заглянете в файл +db/migrate/20100207214725_create_posts.rb+ (помните, у вас файл имеет немного другое имя), вот что там обнаружите:

<ruby>
class CreatePosts < ActiveRecord::Migration
  def change
    create_table :posts do |t|
      t.string :name
      t.string :title
      t.text :content

      t.timestamps
    end
  end
end
</ruby>

Эта миграция создает метод +change+, вызываемый при запуске этой миграции. Действие, определенное в этой миграции, также является обратимым, что означает, что Rails знает, как отменить изменения, сделанные этой миграцией, в случае, если вы решите их отменить позже. Когда вы запустите эту миграцию, она создаст таблицу +posts+ с двумя строковыми столбцами и текстовым столбцом. Она также создаст два поля временных меток для отслеживания времени создания и обновления публикации. Подробнее о миграциях Rails можно прочесть в руководстве "Миграции базы данных Rails":/rails-database-migrations.

Сейчас нам нужно использовать команду rake, чтобы запустить миграцию:

<shell>
$ rake db:migrate
</shell>

Rails запустит эту команду миграции и сообщит, что он создал таблицу Posts.

<shell>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0019s
==  CreatePosts: migrated (0.0020s) ===========================================
</shell>

NOTE. Так как вы работаете по умолчанию в среде development, эта команда будет применена к базе данных, определенной в секции <tt>development</tt> вашего файла +config/database.yml+. Если хотите запустить миграции в другой среде, например в production, следует явно передать ее при вызове команды: <tt>rake db:migrate RAILS_ENV=production</tt>.

h4. Добавляем ссылку

Чтобы подключить контроллер posts к домашней странице, которую уже создали, можно добавить ссылку на ней. Откройте +/app/views/home/index.html.erb+ И измените его следующим образом:

<ruby>
<h1>Hello, Rails!</h1>
<%= link_to "Мой блог", posts_path %>
</ruby>

Метод +link_to+ - один из встроенных хелперов Rails. Он создает гиперссылку, на основе текста для отображения и указания куда перейти - в нашем случае путь для контроллера posts.

h4. Работаем с публикациями в браузере

Теперь Вы готовы работать с публикациями. Чтобы это сделать, перейдите по адресу "http://localhost:3000":http://localhost:3000/ и нажмите на ссылку "Мой блог":</p>

!/system/images/posts_index.png(Скриншот страницы Posts Index)!

Это результат рендеринга Rails вьюхи ваших публикаций +index+. Сейчас нет никаких публикаций в базе данных, но если нажать на ссылку +New Post+, вы можете создать одну. После этого вы увидите, что можете редактировать публикацию, просматривать или уничтожать ее. Вся логика и HTML были построены одной единственной командой +rails generate scaffold+.

INFO. В режиме development (с которым вы работаете по умолчанию), Rails перегружает ваше приложение с каждым запросом браузера, так что не нужно останавливать и перезапускать веб-сервер.

Поздравляем, вы начали свой путь по рельсам! =) Теперь настало время узнать, как это все работает.

h4. Модель

Файл модели +app/models/post.rb+ выглядит проще простого:

<ruby>
class Post < ActiveRecord::Base
end
</ruby>

Не так уж много написано в этом файле, но заметьте, что класс +Post+ наследован от +ActiveRecord::Base+. Active Record обеспечивает огромную функциональность для Ваших моделей Rails, включая основные операции для базы данных CRUD (Create, Read, Update, Destroy - создать, читать, обновить, уничтожить), валидации данных, сложную поддержку поиска и возможность устанавливать отношения между разными моделями.

h4. Добавляем немного валидации

Rails включает методы, помогающие проверить данные, которые вы передаете в модель. Откройте файл +app/models/post.rb+ и отредактируйте:

<ruby>
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }
end
</ruby>

Эти изменения позволят быть уверенным, что все публикации имеют имя и заголовок, и что заголовок длиной как минимум пять символов. Rails может проверять разные условия в модели, включая существование или уникальность полей, их формат и существование связанных объектов. Подробнее валидации раскрыты в "Валидации и колбэки Active Record":/active-record-validations-and-callbacks

h4. Использование консоли

Чтобы увидеть валидации в действии, можно использовать консоль. Консоль это инструмент, который позволяет запускать код Ruby в контексте вашего приложения:

<shell>
$ rails console
</shell>

NOTE. По умолчанию, консоль изменяет вашу базу данных. Вместо этого можно запустить консоль, которая откатывает все изменения, которые вы сделали, используя <tt>rails console --sandbox</tt>.

После загрузки консоли можно работать с моделями вашего приложения:

<shell>
>> p = Post.new(:content => "A new post")
=> #<Post id: nil, name: nil, title: nil,
     content: "A new post", created_at: nil,
     updated_at: nil>
>> p.save
=> false
>> p.errors.full_messages
=> ["Name can't be blank", "Title can't be blank", "Title is too short (minimum is 5 characters)"]
</shell>

Этот код показывает создание нового экземпляра +Post+, попытку его сохранения и возврата в качестве ответа +false+ (что означает, что сохранить не получилось), и просмотр +ошибок+ публикации.

Когда закончите, напишите +exit+ и нажмите +return+, чтобы вернуться в консоль.

TIP: В отличие от веб-сервера development, консоль автоматически не загружет код после выполнения строки. Если вы внесли изменения в свои модели (в своем редакторе) в то время, когда консоль была открыта, напишите в консоли  +reload!+, чтобы консоль загрузила эти изменения.

h4. Отображение всех публикаций

Давайте поглубже погрузимся в код Rails и увидим, как приложение отображает нам список публикаций. Откройте файл +app/controllers/posts_controller.rb+ и взгляните на экшн +index+:

<ruby>
def index
  @posts = Post.all

  respond_to do |format|
    format.html  # index.html.erb
    format.json  { render :json => @posts }
  end
end
</ruby>

+Post.all+ возвращает все публикации, которые сейчас есть в базе данных, как массив, содержащий все хранимые записи +Post+, который сохраняется в переменную экземпляра с именем +@posts+.

TIP: Дальнейшую информацию о поиске записей с помощью Active Record можете посмотреть в руководстве "Интерфейс запросов Active Record":/active-record-query-interface.

Блок +respond_to+ отвечает за вызов HTML и JSON для этого экшна. Если вы пройдете по адресу "http://localhost:3000/posts.json":http://localhost:3000/posts.json, то увидите все публикации в формате JSON. Формат HTML ищет вьюху в +app/views/posts/+ с именем, соответствующим имени экшна. В Rails все переменные экземпляра экшна доступны во вьюхе. Вот код +app/view/posts/index.html.erb+:

<erb>
<h1>Listing posts</h1>

<table>
  <tr>
    <th>Name</th>
    <th>Title</th>
    <th>Content</th>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @posts.each do |post| %>
  <tr>
    <td><%= post.name %></td>
    <td><%= post.title %></td>
    <td><%= post.content %></td>
    <td><%= link_to 'Show', post %></td>
    <td><%= link_to 'Edit', edit_post_path(post) %></td>
    <td><%= link_to 'Destroy', post, :confirm => 'Are you sure?',
                                     :method => :delete %></td>
  </tr>
<% end %>
</table>

<br />

<%= link_to 'New post', new_post_path %>
</erb>

Эта вьюха перебирает содержимое массива +@posts+, чтобы отразить содержимое и ссылки. Следует кое-что отметить во вьюхе:

* +link_to+ создает гиперссылку определенного назначения
* +edit_post_path+ и +new_post_path+ это хелперы, предоставленные Rails как часть роутинга RESTful. Вы увидите, что есть много таких хелперов для различных экшнов, включенных в контроллер.

NOTE. В прежних версиях Rails следовало использовать +&lt;%=h post.name %&gt;+, чтобы любой HTML был экранирован перед вставкой на страницу. Теперь в Rails 3.0+ это по умолчанию. Чтобы получить неэкранированный HTML, сейчас следует использовать +&lt;%= raw post.name %&gt;+.

TIP: Более детально о процессе рендеринга смотрите тут: "Шаблоны и рендеринг в Rails":/layouts-and-rendering-in-rails.

h4. Настройка макета

Вьюха это только часть того, как HTML отображается в вашем браузере. В Rails также есть концепция +макетов+, которые являются контейнерами для вьюх. Когда Rails рендерит вьюху для браузера, он делает это вкладывая вьюшный HTML в HTML макета. В прежних версиях Rails команда +rails generate scaffold+ создала бы автоматически макет для определенного контроллера, такой как +app/views/layouts/posts.html.erb+ для контроллера posts. Однако, это изменилось в Rails 3.0+. Определенный для приложения +макет+ используется для всех контроллеров и располагается в +app/views/layouts/application.html.erb+. Откройте этот макет в своем редакторе и измените тег +body+, указав style:

<erb>
<!DOCTYPE html>
<html>
<head>
  <title>Blog</title>
  <%= stylesheet_link_tag "application" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body style="background: #EEEEEE;">

<%= yield %>

</body>
</html>
</erb>

Теперь, когда вы обновите страницу +/posts+, то увидите серый бэкграунд страницы. Тот же серый бэкграунд будет использоваться везде на всех вьюхах контроллера posts.

h4. Создание новой публикации

Создание новой публикации включает два экшна. Первый экшн это +new+, который  создает экземпляр пустого объекта +Post+:

<ruby>
def new
  @post = Post.new

  respond_to do |format|
    format.html  # new.html.erb
    format.json  { render :json => @post }
  end
end
</ruby>

Вьюха +new.html.erb+ отображает этот пустой объект Post пользователю:

<erb>
<h1>New post</h1>

<%= render 'form' %>

<%= link_to 'Back', posts_path %>
</erb>

Строка +&lt;%= render 'form' %&gt;+ это наше первое введение в _партиалы_ Rails. Партиал это фрагмент HTML и кода Ruby, который может использоваться в нескольких местах. В нашем случае форма, используемая для создания новой публикации, в основном сходна с формой, используемой для редактирования публикации, обе имеют текстовые поля для имени и заголовка и текстовую область для содержимого с кнопкой для создания новой публикации или обновления существующей.

Если заглянете в файл +views/posts/_form.html.erb+, то увидите следующее:

<erb>
<%= form_for(@post) do |f| %>
  <% if @post.errors.any? %>
  <div id="errorExplanation">
    <h2><%= pluralize(@post.errors.count, "error") %> prohibited
      this post from being saved:</h2>
    <ul>
    <% @post.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
  <% end %>

  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </div>
  <div class="field">
    <%= f.label :content %><br />
    <%= f.text_area :content %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
</erb>

Этот партиал получает все переменные экземпляра, определенные в вызывающем файле вьюхи. В нашем случае контроллер назначил новый объект +Post+ в +@post+, который, таким образом, будет доступен и во вьюхе, и в партиале как +@post+.

Чтобы узнать больше о партиалах, обратитесь к руководству "Макеты и рендеринг в Rails":/layouts-and-rendering-in-rails/structuring-layouts-3.

Блок +form_for+ используется, чтобы создать форму HTML. Внутри этого блока у вас есть доступ к методам построения различных элементов управления формы. Например, +f.text_field :name+ говорит Rails создать поле ввода текста в форме и подключить к нему аттрибут +name+ экземпляра для отображения. Эти методы можно использовать только для аттрибутов той модели, на которой основана форма (в нашем случае +name+, +title+ и +content+). В Rails предпочтительней использовать +form_for+ чем писать на чистом HTML, так как код получается более компактным и явно связывает форму с конкретным экземпляром модели.

Блок +form_for+ также достаточно сообразительный, чтобы понять, что вы собираетесь выполнить экшн _New Post_ или _Edit Post_, и установит теги формы +action+ и имена кнопок подтверждения подходящим образом в результирующем HTML.

INFO. Если нужно создать форму HTML, которая отображает произвольные поля, не связанные с моделью, нужно использовать метод +form_tag+, который предоставляет ярлыки для построения форм, которые непосредственно не связаны с экземпляром модели.

Когда пользователь нажмет кнопку +Create Post+ в этой форме, браузер пошлет информацию назад к экшну +create+ контроллера (Rails знает, что нужно вызвать экшн +create+, потому что форма посылает POST запрос; это еще одно соглашение, о котором говорилось ранее):

<ruby>
def create
  @post = Post.new(params[:post])

  respond_to do |format|
    if @post.save
      format.html  { redirect_to(@post,
                    :notice => 'Post was successfully created.') }
      format.json  { render :json => @post,
                    :status => :created, :location => @post }
    else
      format.html  { render :action => "new" }
      format.json  { render :json => @post.errors,
                    :status => :unprocessable_entity }
    end
  end
end
</ruby>

Экшн +create+ создает новый экземпляр объекта Post из данных, предоставленных пользователем в форме, которые в Rails доступны в хэше +params+. После успешного сохранения новой публикации, +create+ возвращает подходящий формат, который запросил пользователь (HTML в нашем случае). Затем он перенаправляет пользователя на экшн +show+ получившейся публикации и устанавливает уведомление пользователя, что Post was successfully created.

Если публикация не была успешно сохранена, в связи с ошибками валидации, то контроллер возвратит пользователя обратно на экшн +new+ со всеми сообщениями об ошибке, таким образом у пользователя есть шанс исправить их и попробовать снова.

Сообщение "Post was successfully created" храниться в хэше Rails +flash+, (обычно называемый просто _Flash_), с помощью него сообщения могут переноситься в другой экшн, предоставляя пользователю полезную информацию от статусе своих запросов. В случае с +create+, пользователь никогда не увидит какой-либо отрендеренной страницы в процессе создания публикации, так как происходит немедленный редирект, как только Rails сохраняет запись. Flash переносит сообщение в следующий экшн, поэтому когда пользователь перенаправляется в экшн +show+ ему выдается сообщение "Post was successfully created".

h4. Отображение отдельной публикации

Когда нажмете на ссылку +show+ для публикации на индексной странице, вы перейдете на URL такого вида +http://localhost:3000/posts/1+. Rails интерпретирует это как вызов экшна +show+ для ресурса и передает +1+ как параметр +:id+. Вот код экшна +show+:

<ruby>
def show
  @post = Post.find(params[:id])

  respond_to do |format|
    format.html  # show.html.erb
    format.json  { render :json => @post }
  end
end
</ruby>

Экшн +show+ использует +Post.find+, чтобы найти отдельную запись в базе данных по ее значению id. После нахождения записи, Rails отображает ее, используя +app/views/posts/show.html.erb+:

<erb>
<p class="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>


<%= link_to 'Edit', edit_post_path(@post) %> |
<%= link_to 'Back', posts_path %>
</erb>

h4. Редактирование публикаций

Подобно созданию новой публикации, редактирование публикации двусторонний процесс. Первый шаг это запрос определенной публикации +>edit_post_path(@post)+. Это вызывает экшн +edit+ в контроллере:

<ruby>
def edit
  @post = Post.find(params[:id])
end
</ruby>

После нахождения требуемой публикации, Rails использует вьюху +edit.html.erb+ чтобы отобразить ее:

<erb>
<h1>Editing post</h1>

<%= render 'form' %>

<%= link_to 'Show', @post %> |
<%= link_to 'Back', posts_path %>
</erb>

Снова, как и в случае с экшном +new+, экшн +edit+ использует партиал +form+. Однако в этот раз форма выполнит действие PUT в +PostsController+ и кнопка подтверждения будет называться "Update Post".

Подтвержение формы, созданной в этой вьюхе, вызывает экшн +update+ в контроллере:

<ruby>
def update
  @post = Post.find(params[:id])

  respond_to do |format|
    if @post.update_attributes(params[:post])
      format.html  { redirect_to(@post,
                    :notice => 'Post was successfully updated.') }
      format.json  { head :no_content }
    else
      format.html  { render :action => "edit" }
      format.json  { render :json => @post.errors,
                    :status => :unprocessable_entity }
    end
  end
end
</ruby>

В экшне +update+, Rails сначала использует параметр +:id+, возвращенный от вьюхи edit, чтобы обнаружить запись в базе данных, которую будем редактировать. Затем вызов +update_attributes+ берет параметр +post+ (хэш) из запроса и применяет его к записи. Если все проходит хорошо, пользователь перенаправляется на вьюху +show+. Если возникает какая-либо проблема, направляет обратно в экшн +edit+, чтобы исправить ее.

h4. Уничтожение публикации

Наконец, нажатие на одну из ссылок +destroy+ пошлет соответствующий id в экшн +destroy+:

<ruby>
def destroy
  @post = Post.find(params[:id])
  @post.destroy

  respond_to do |format|
    format.html { redirect_to posts_url }
    format.json { head :no_content }
  end
end
</ruby>

Метод +destroy+ экземпляра модели Active Record убирает соответствующую запись из базы данных. После этого отображать нечего и Rails перенаправляет браузер пользователя на экшн index контроллера.</p>

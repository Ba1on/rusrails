h1. Методы и экшны

<p>Контроллер это класс Ruby, унаследованный от <tt>ApplicationController</tt> и имеющий методы, как и любой другой класс. Когда ваше приложение получает запрос, роутинг определит, какой контроллер и экшн запустить, затем Rails создаст экземпляр этого контроллера и запустит метод с именем, как у экшна.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
class ClientsController &lt; ApplicationController
  def new
  end
end
</pre></div>
<p>В качестве примера, если пользователь перейдет в <tt>/clients/new</tt> в вашем приложении, чтобы добавить нового пользователя, Rails создаст экземпляр <tt>ClientsController</tt> и запустит метод <tt>new</tt>. Отметьте, что пустой метод из вышеописанного примера будет прекрасно работать, так как Rails по умолчанию отрендерит вьюху <tt>new.html.erb</tt>, если экшн не сообщит иное. Метод <tt>new</tt> может сделать доступной для вьюхи переменную экземпляра <tt>@client</tt> для создания нового <tt>Client</tt>:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
def new
  @client = Client.new
end
</pre></div>
<p>Руководство <a href="/layouts-and-rendering-in-rails">Макеты и рендеринг в Rails</a> объясняет это более детально.</p>
<p><tt>ApplicationController</tt> наследуется от <tt>ActionController::Base</tt>, который определяет несколько полезных методов. Это руководство раскроет часть из них, но если Вы любопытны, можете увидеть их все сами в документации по <span class="caps">API</span>.</p>
<p>Только public методы могут быть вызваны как экшны. Хорошей практикой является уменьшения области видимости методов, не предназначенных быть экшнами, таких как вспомогательные методы и фильтры.</p>
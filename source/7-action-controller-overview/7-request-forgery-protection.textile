h1. Защита от подделки запросов

<p>Подделка межсайтовых запросов это тип атаки, в которой сайт обманом заставляет пользователя сделать запрос на другой сайт, возможно добавляя, изменяя или удаляя данные на этом сайте без ведома или разрешения пользователя.</p>
<p>Первый шаг в избегании этого - убедиться, что все &#8220;разрушительные&#8221; экшны (создание, обновление и уничтожение) могут быть доступны только не-<span class="caps">GET</span> запросам. Если вы следуете соглашениям RESTful, то уже делаете это. Однако, сайт злоумышленника может также легко послать не-<span class="caps">GET</span> запрос на Ваш сайт, поэтому и необходима защита от подделки запросов. Как следует из ее имени, она защищает от подделанных запросов.</p>
<p>Это можно сделать, добавив неугадываемый токен, известный только Вашему серверу, в каждый запрос. При этом способе, если запрос приходит без подходящего токена, ему будет отказано в доступе.</p>
<p>Если Вы генерируете подобную форму:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
&lt;% form_for @user do |f| -%&gt;
  &lt;%= f.text_field :username %&gt;
  &lt;%= f.text_field :password -%&gt;
&lt;% end -%&gt;
</pre></div>
<p>Вы увидите, как токен будет добавлен в скрытое поле:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
<form accept-charset="UTF-8" action="/users/1" method="post">
<input type="hidden"
       value="67250ab105eb5ad10851c00a5621854a23af5489"
       name="authenticity_token"/>
<!-- fields -->
</form>
</pre></div>
<p>Rails добавит этот токен в каждую форму, генерируемую с помощью <a href="./rails-form-helpers">хелперов форм</a>, таким образом, большую часть времени можете об этом не беспокоиться. Если Вы пишете формы вручную или хотите добавить токен по другой причине, это можно сделать, используя метод <tt>form_authenticity_token</tt>:</p>
<p><tt>form_authenticity_token</tt> создает валидный аутентификационный токен. Его полезно помещать в места, куда Rails не добавляет его автоматически, например в произвольные вызовы Ajax.</p>
<p>В <a href="/ruby-on-rails-security-guide">Руководстве по безопасности</a> имеется более подробная информация об этом, и множество других вопросов, посвященных безопасности, которые вы должны принимать во внимание при разработке веб приложения.</p>
h1. Введение в тестирование

<p>Поддержка тестирования встроена в Rails с самого начала. И это не было так: &#8220;О! Давайте внесем поддержку запуска тестов, это ново и круто!&#8221; Почти каждое приложение на Rails сильно взаимодействует с базой данных &#8211; и, как результат, тестам также требуется база данных для работы. Чтобы писать эффективные тесты, следует понять, как настроить эту базу данных и наполнить ее образцом данных.</p>

<h4 id="the-three-environments">1. Три среды разработки</h4>
<p>Каждое создаваемое приложение на Rails имеет 3 стороны: сторона для работы (production), сторона для разработки (development), и сторона для тестирования.</p>
<p>Одно из мест, где видны эти различия, является файл <tt>config/database.yml</tt>. Этот конфигурационный файл <span class="caps">YAML</span> имеет 3 различные секции, определяющие настройки 3 уникальных баз данных:</p>
<ul>
	<li>production</li>
	<li>development</li>
	<li>test</li>
</ul>
<p>Это позволяет настроить и взаимодействовать с тестовыми данными без какой-либо опасности, что тесты изменят данные в вашей рабочей среде.</p>
<p>Например, предположим необходимо протестировать новую функцию <tt>delete_this_user_and_every_everything_associated_with_it</tt>. Разве вы не захотите сперва запустить ее в среде, где нет никакой разницы, будут уничтожены данные или нет?</p>
<p>Когда вы уничтожите свою тестовую базу данных (а это произойдет, верьте нам), то сможете восстановить ее с нуля в соответствии со спецификациями, определенными в базе данных development. Это можно сделать, запустив <tt>rake db:test:prepare</tt>.</p>

<h4 id="rails-sets-up-for-testing-from-the-word-go">2. Настройка Rails для тестирования с нуля</h4>
<p>Rails создает папку <tt>test</tt> как только вы создаете проект Rails, используя <tt>rails new _application_name_</tt>. Если посмотрите список содержимого этой папки, то увидите:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
$ ls -F test/

fixtures/       functional/     integration/    test_helper.rb  unit/
</pre></div>
<p>Папка <tt>unit</tt> предназначена содержать тесты для ваших моделей, папка <tt>functional</tt> предназначена содержать тесты для ваших контроллеров, и папка <tt>integration</tt> предназначена содержать тесты, которые включают любое взаимодействие контроллеров. Фикстуры это способ организации тестовых данных; они находятся в папке <tt>fixtures</tt>. Файл <tt>test_helper.rb</tt> содержит конфигурацию по умолчанию для ваших тестов.</p>

<h4 id="the-low-down-on-fixtures">3. Полная информация по фикстурам</h4>
<p>Для хороших тестов необходимо подумать о настройке тестовых данных. В Rails этим можно управлять, определяя и настраивая фикстуры.</p>

<h5 id="what-are-fixtures">3.1 Что такое фикстуры?</h5>
<p><em>Fixtures</em> это выдуманное слово для образцов данных. Фикстуры позволяют заполнить вашу тестовую базу данных предопределенными данными до запуска тестов. Фикстуры независимы от типа базы данных и предполагают один формат: <strong><span class="caps">YAML</span></strong>.</p>
<p>Фикстуры расположены в директории <tt>test/fixtures</tt>. Когда запускаете <tt>rails generate model</tt> для создания новой модели, незаконченные фикстуры будут автоматически созданы и помещены в эту директорию.</p>

<h5 id="yaml">3.2 <span class="caps">YAML</span></h5>
<p>Фикстуры в формате <span class="caps">YAML</span> являются дружелюбным способом описать Ваш образец данных. Этот тип фикстур имеет расширение файла <strong>.yml</strong> (как в <tt>users.yml</tt>).</p>
<p>Вот образец файла фикстуры <span class="caps">YAML</span>:</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
# low &amp; behold!  I am a YAML comment!
david:
 name: David Heinemeier Hansson
 birthday: 1979-10-15
 profession: Systems development

steve:
 name: Steve Ross Kellock
 birthday: 1974-09-27
 profession: guy with keyboard
</pre></div>
<p>Каждой фикстуре дается имя со следующим за ним списком с отступом пар ключ/значение, разделенных двоеточием. Записи разделяются пустой строкой. Можете помещать комментарии в файл фикстуры, используя символ # в первом столбце.</p>

<h5 id="erbin-it-up">3.3 ERb</h5>
<p>ERb позволяет встраивать код ruby в шаблоны. Формат фикстур <span class="caps">YAML</span> предварительно обрабатывается с помощью ERb при загрузке фикстур. Это позволяет использовать Ruby для помощи в создании некоторых образцов данных.</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
&lt;% earth_size = 20 %&gt;
mercury:
  size: &lt;%= earth_size / 50 %&gt;
  brightest_on: &lt;%= 113.days.ago.to_s(:db) %&gt;

venus:
  size: &lt;%= earth_size / 2 %&gt;
  brightest_on: &lt;%= 67.days.ago.to_s(:db) %&gt;

mars:
  size: &lt;%= earth_size - 69 %&gt;
  brightest_on: &lt;%= 13.days.from_now.to_s(:db) %&gt;
</pre></div>
<p>Все, что заключено в тэг</p>
<div class="code_container"><pre class="brush: plain; gutter: false; toolbar: false">
&lt;% %&gt;
</pre></div>
<p>рассматривается как код Ruby. Когда эта фикстура загружается, атрибут <tt>size</tt> трех записей будет установлен 20/50, 20/2 и 20-69 соответственно. атрибут <tt>brightest_on</tt> также будет рассчитан и форматирован Rails для совместимости с базой данных.</p>

<h5 id="fixtures-in-action">3.4 Фикстуры в действии</h5>
<p>Rails по умолчанию автоматически загружает все фикстуры из папки &#8216;test/fixtures&#8217; для ваших юнит- и функциональных тестов. Загрузка состоит из трех этапов:</p>
<ul>
	<li>Убираются любые существующие данные из таблицы, соответствующей фикстуре</li>
	<li>Загружаются данные фикстуры в таблицу</li>
	<li>Выгружаются данные фикстуры в переменную, в случае, если вы хотите обращаться к ним напрямую</li>
</ul>

<h5 id="hashes-with-special-powers">3.5 Хэши с особыми возможностями</h5>
<p>Фикстуры в основе являются объектами Hash. Как упоминалось в этапе №3 выше, Вы можете обращаться к объекту hash напрямую, поскольку он автоматически настраивается как локальная переменная для задачи тестирования. Например:</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# это возвратит Hash для фикстуры с именем david
users(:david)

# это возвратит свойство для david, названное id
users(:david).id
</pre></div>
<p>Фикстуры также могут изменить себя в форму оригинального класса. Таким образом, можете получить методы, доступные только для этого класса.</p>
<div class="code_container"><pre class="brush: ruby; gutter: false; toolbar: false">
# используя метод find, мы присваиваем &quot;реального&quot; david как экземпляр User
david = users(:david).find

# и теперь у нас есть доступ к методам, доступным только для класса User
email(david.girlfriend.email, david.location_tonight)
</pre></div>